{"remainingRequest":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/thread-loader/dist/cjs.js!/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/babel-loader/lib/index.js!/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/src/views/Processes.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/src/views/Processes.vue","mtime":1570790569477},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/babel-loader/lib/index.js","mtime":1570790663215},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1570790663275},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/index.js","mtime":1570790665183},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1570790663275},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1570790665071},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/babel-loader/lib/index.js","mtime":1570790663215},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1570790663275},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/index.js","mtime":1570790665183}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport TopLineContent from '@/components/elements/TopLineContent.vue';\nimport SelectComponent from '@/components/elements/fields/SelectComponent.vue';\nimport MaterialTitle from '@/components/elements/MaterialTitle.vue';\nimport MaterialProcess from '@/components/materials/lines/MaterialProcess.vue';\n\nconst MessageBox = () => import(\n/* webpackChunkName: \"MessageBox\" */\n'@/components/modals/MessageBox.vue');\n\nconst EditProcessModal = () => import(\n/* webpackChunkName: \"EditProcessModal\" */\n'@/components/modals/EditProcessModal.vue');\n\nexport default {\n  name: 'PageProcesses',\n  nameComponent: 'PageProcesses',\n  components: {\n    TopLineContent,\n    MaterialTitle,\n    SelectComponent,\n    MaterialProcess\n  },\n\n  data() {\n    return {\n      curMaterials: [],\n      materials: [],\n      materialTitle: {\n        elements: [// white-space: pre-line;\n        {\n          value: this.$t('$title_material.user'),\n          panel__tooltip: \"Имя владельца процесса\",\n          class: \"panel__tooltip\"\n        }, {\n          value: this.$t('$title_material.c'),\n          panel__tooltip: \"Значение загрузки процессора\",\n          class: \"panel__tooltip\"\n        }, {\n          value: this.$t('$title_material.mem'),\n          panel__tooltip: \"Часть реальной памяти (%), используемая процессом\",\n          class: \"panel__tooltip\"\n        }, {\n          value: this.$t('$title_material.pid'),\n          panel__tooltip: \"Идентификатор процесса\",\n          class: \"panel__tooltip\"\n        }, {\n          value: this.$t('$title_material.pgid'),\n          panel__tooltip: \"Индентификатор группы\",\n          class: \"panel__tooltip\"\n        }, {\n          value: this.$t('$title_material.ppid'),\n          panel__tooltip: \"Идентификатор родительского процесса\",\n          class: \"panel__tooltip\"\n        }, {\n          value: this.$t('$title_material.psr'),\n          panel__tooltip: \"Процесс, которому в данный момент назначен процесс\",\n          class: \"panel__tooltip\"\n        }, {\n          value: this.$t('$title_material.rss'),\n          panel__tooltip: \"Размер резидентного набора (количество страниц памяти)\",\n          class: \"panel__tooltip\"\n        }, {\n          value: this.$t('$title_material.sid'),\n          panel__tooltip: \"Идентификатор сеанса\",\n          class: \"panel__tooltip\"\n        }, {\n          value: this.$t('$title_material.start'),\n          panel__tooltip: \"Время создания процесса\",\n          class: \"panel__tooltip\"\n        }, {\n          value: this.$t('$title_material.stat'),\n          panel__tooltip: \"Текущий статус процесса:\" + \"\\n\\tR — выполняется\" + \"\\n\\tD — ожидает записи на диск\" + \"\\n\\tS — неактивен (< 20 с)\" + \"\\n\\tT — приостановлен\" + \"\\n\\tZ — зомби\" + \"\\n\\tДополнительные флаги:\" + \"\\n\\tW — процесс выгружен на диск\" + \"\\n\\t< — процесс имеет повышенный приоритет\" + \"\\n\\tN — процесс имеет пониженный приоритет\" + \"\\n\\tL — некоторые страницы блокированы в оперативной памяти\" + \"\\n\\ts — процесс является лидером сеанса\" + \"\\n\\tl — является многопоточным\" + \"\\n\\t+ — находится на переднем плане процесса группы\" + \"\\n\\tI — процесс в состоянии простоя\",\n          class: \"panel__tooltip\"\n        }, {\n          value: this.$t('$title_material.sz'),\n          panel__tooltip: \"Размер в физических страницах основного образа процесса\",\n          class: \"panel__tooltip\"\n        }, {\n          value: this.$t('$title_material.time'),\n          panel__tooltip: \"Количество времени ЦП, затраченное на выполнение процесса\",\n          class: \"panel__tooltip\"\n        }, {\n          value: this.$t('$title_material.tpgid'),\n          panel__tooltip: \"Идентификатор группы процессов переднего плана на TTY (терминале), к которому подключен процесс, или -1 если процесс не связан с TTY\",\n          class: \"panel__tooltip\"\n        }, {\n          value: this.$t('$title_material.tty'),\n          panel__tooltip: \"Идентификатор управляяющего терминала\",\n          class: \"panel__tooltip\"\n        }, {\n          value: this.$t('$title_material.uid'),\n          panel__tooltip: \"Эффективный идентификатор пользователя\",\n          class: \"panel__tooltip\"\n        }, {\n          value: this.$t('$title_material.vsz'),\n          panel__tooltip: \"Виртуальный размер процесса\",\n          class: \"panel__tooltip\"\n        }, {\n          value: this.$t('$title_material.cmd'),\n          panel__tooltip: \"Имя и аргументы команды\",\n          class: \"panel__tooltip\"\n        }],\n        material: 'process'\n      },\n      topLineDefault: {\n        user: 'ALL_USERS'\n      },\n      topLine: {\n        options: {\n          user: [{\n            value: 'ALL_USERS',\n            label: this.$t('$common.all_users'),\n            fixed_index: 0\n          }]\n        },\n        user: ''\n      },\n      currentSort: 0,\n      currentSortDirection: true,\n      // true ↓, false ↑\n      scrollTop: 0,\n      isUpdate: false\n    };\n  },\n\n  computed: {\n    noBorder() {\n      return this.scrollTop < 100 && this.materials.length !== 0;\n    }\n\n  },\n\n  created() {\n    console.log(\"[Processes.vue]: created \", this.$route);\n    this.initStart();\n    this.fetchData();\n  },\n\n  methods: {\n    getStructModal() {\n      let struct = {\n        title: '',\n        button: '',\n        buttonNameEvent: '',\n        sectionStruct: {\n          options: null,\n          fields: [{\n            name: 'cmd',\n            type: 'input',\n            options: {\n              label: this.$t('$fields.cmd'),\n              maxLength: 80\n            }\n          }, {\n            name: 'attributes',\n            type: 'input',\n            options: {\n              label: this.$t('$fields.attributes'),\n              passFillValid: true\n            }\n          }]\n        }\n      };\n      return struct;\n    },\n\n    handleInputTitle(index) {\n      // let curIndex = index === 1 ? 0 : index;         // disabled district index 1\n      if (this.currentSort === index) {\n        this.currentSortDirection = !this.currentSortDirection;\n      } else {\n        this.currentSort = index;\n        this.currentSortDirection = true;\n      }\n\n      localStorage.setItem('sort_omanager_direction', this.currentSortDirection);\n      localStorage.setItem('sort_omanager', index);\n      this.clearData();\n      this.fetchData();\n    },\n\n    handleClickTopButton(event) {\n      console.log(\"[Processes.vue]: handleClickTopButton: \", event);\n      this.showModal('create');\n    },\n\n    showModal(key) {\n      let obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      let struct = this.getStructModal();\n      let value = null;\n\n      if (key === 'create') {\n        struct.title = this.$t('$fields.new_public_process');\n        struct.button = this.$t('$buttons.start');\n        struct.buttonNameEvent = 'create';\n        value = {\n          cmd: '',\n          attributes: ''\n        };\n      }\n\n      this.$store.commit('addModal', {\n        value: value,\n        options: {\n          struct: struct,\n          callback: this.callbackModal,\n          eventValue: obj === null ? null : obj.index\n        },\n        component: EditProcessModal\n      });\n    },\n\n    callbackModal(event) {\n      console.log(\"[Processes.vue]: callbackModal: \", event);\n\n      if (!!event) {\n        if (event.typeEvent === 'close') {\n          this.$store.commit('removeModal', event.indexModal);\n        } else if (event.typeEvent === 'create') {\n          console.log(\"CREATE PROCESS\");\n          this.postPromocode(event.value, event.indexModal);\n        }\n      }\n    },\n\n    clearData() {\n      this.materials = [];\n    },\n\n    handleTopSelect(key, event) {\n      this.topLine[key] = event;\n      localStorage.setItem(`omanager-panel__${key}-processes`, event);\n      this.clearData();\n      this.fetchData();\n    },\n\n    getLocalStorageValue(key, defaultValue) {\n      let localVar = localStorage.getItem(key);\n\n      if (localVar) {\n        return localVar;\n      } else {\n        localStorage.setItem(key, defaultValue);\n      }\n\n      return defaultValue;\n    },\n\n    initStart() {\n      console.log(\"[Processes.vue]: initStart\");\n\n      for (let key in this.topLineDefault) {\n        this.topLine[key] = this.getLocalStorageValue(`omanager-panel__${key}-processes`, this.topLineDefault[key]);\n      }\n\n      let sortStart = this.getLocalStorageValue('sort_omanager', '0');\n      this.currentSort = Number.parseInt(sortStart, 10) || 0;\n      let sortDirection = this.getLocalStorageValue('sort_omanager_direction', 'true');\n      this.currentSortDirection = sortDirection === 'true';\n    },\n\n    scrollFunction(event) {\n      this.scrollTop = event.target.scrollTop;\n    },\n\n    getQueryLine(args) {\n      let length = Object.keys(args).length;\n\n      if (length < 1) {\n        return '';\n      } else {\n        let str = Object.keys(args).map(key => `${key}=${args[key]}`).join('&');\n        return '?' + str;\n      }\n    },\n\n    handleSignalElement(indexRemove, signal) {\n      console.log(\"[Promovodes.vue]: handleRemoveElement: \", indexRemove);\n      this.$store.commit('addModal', {\n        value: this.$t('$modals.message_box.question_leave'),\n        options: {\n          text: this.$t('$modals.message_box.cannot_undone'),\n          callback: this.callbackMessageBox,\n          buttonCancel: this.$t('$buttons.cancel'),\n          buttonOk: this.$t('$buttons.ok'),\n          type: 'delete',\n          eventValue: {\n            index: indexRemove,\n            data: {\n              signal\n            }\n          }\n        },\n        component: MessageBox\n      });\n    },\n\n    callbackMessageBox(event) {\n      console.log(\"[Processes.vue]: callbackMessageBox: \", event);\n      this.$store.commit('removeModal', event.indexModal);\n\n      if (event.value) {\n        this.PostIdData(event.eventValue.index, event.eventValue.data);\n      }\n    },\n\n    PostIdData(indexElement, postData) {\n      console.log(\"[Processes.vue]: PostIdData: \", postData);\n      this.$store.state.axios.post(`/processes/${this.curMaterials[indexElement].pid}`, postData).then(response => {\n        console.log(\"[FeedId.vue]: PostIdData(response): \", response);\n\n        if (response.status === 200) {\n          // this.materials.splice(indexDelete, 1);\n          // this.isRouteNext = true;\n          // this.$router.replace({ path: '/feed' });\n          this.fetchData();\n        }\n      }).catch(error => {\n        console.log(\"[FeedId.vue]: PostIdData(error): \", error);\n      });\n    },\n\n    deleteData(indexDelete) {\n      console.log(\"[Processes.vue]: deleteData: \", indexDelete);\n      this.$store.state.axios.delete(`/processes/${this.curMaterials[indexDelete].pid}`).then(response => {\n        console.log(\"[FeedId.vue]: deleteFeed(response): \", response);\n\n        if (response.status === 200) {\n          // this.materials.splice(indexDelete, 1);\n          // this.isRouteNext = true;\n          // this.$router.replace({ path: '/feed' });\n          this.fetchData();\n        }\n      }).catch(error => {\n        console.log(\"[FeedId.vue]: deleteFeed(error): \", error);\n      }); // this.materials.splice(indexDelete, 1);\n    },\n\n    handleEditElement(indexEdit) {\n      console.log(\"[Promovodes.vue]: handleEditElement: \", indexEdit);\n      this.showModal('edit', {\n        index: indexEdit,\n        material: this.materials[indexEdit]\n      });\n    },\n\n    getFilterByUser(source) {\n      console.log(this.topLine.user);\n\n      if (this.topLine.user === 'ALL_USERS') {\n        return source;\n      }\n\n      return source.filter(process => process.user === this.topLine.user);\n    },\n\n    globalSort() {\n      let materials = this.$panel.clone(this.materials);\n      materials = this.getFilterByUser(materials);\n      materials = this.sortByField(materials, this.currentSort);\n      this.curMaterials = materials;\n    },\n\n    sortByField(v, current) {\n      let array = this.$panel.clone(v);\n\n      function sortByCurrent(a, b) {\n        let tmp1 = a,\n            tmp2 = b;\n\n        switch (current) {\n          case 0:\n            tmp1 = a.user.toLowerCase();\n            tmp2 = b.user.toLowerCase();\n            break;\n\n          case 1:\n            tmp1 = a.c;\n            tmp2 = b.c;\n            break;\n\n          case 2:\n            tmp1 = a.mem;\n            tmp2 = b.mem;\n            break;\n\n          case 3:\n            tmp1 = a.pid;\n            tmp2 = b.pid;\n            break;\n\n          case 4:\n            tmp1 = a.pgid;\n            tmp2 = b.pgid;\n            break;\n\n          case 5:\n            tmp1 = a.ppid;\n            tmp2 = b.ppid;\n            break;\n\n          case 6:\n            tmp1 = a.psr;\n            tmp2 = b.psr;\n            break;\n\n          case 7:\n            tmp1 = a.rss;\n            tmp2 = b.rss;\n            break;\n\n          case 8:\n            tmp1 = a.sid;\n            tmp2 = b.sid;\n            break;\n\n          case 9:\n            tmp1 = a.start;\n            tmp2 = b.start;\n            break;\n\n          case 10:\n            tmp1 = a.stat;\n            tmp2 = b.stat;\n            break;\n\n          case 11:\n            tmp1 = a.sz;\n            tmp2 = b.sz;\n            break;\n\n          case 12:\n            tmp1 = a.time;\n            tmp2 = b.time;\n            break;\n\n          case 13:\n            tmp1 = a.tpgid;\n            tmp2 = b.tpgid;\n            break;\n\n          case 14:\n            tmp1 = a.tty;\n            tmp2 = b.tty;\n            break;\n\n          case 15:\n            tmp1 = a.uid;\n            tmp2 = b.uid;\n            break;\n\n          case 16:\n            tmp1 = a.vsz;\n            tmp2 = b.vsz;\n            break;\n\n          case 17:\n            tmp1 = a.cmd.toLowerCase();\n            tmp2 = b.cmd.toLowerCase();\n            break;\n\n          default:\n            tmp1 = a.toString().toLowerCase();\n            tmp2 = b.toString().toLowerCase();\n        }\n\n        if (tmp1 < tmp2) return -1;\n        if (tmp1 > tmp2) return 1;\n        return 0;\n      }\n\n      array.sort(sortByCurrent);\n\n      if (!this.currentSortDirection) {\n        array = array.reverse();\n      } // console.log(Object.prototype.toString.call(array), array);\n      //console.log(this.current_sort);\n\n\n      return array;\n    },\n\n    updateSelect(array) {\n      let users = [];\n      array.forEach(process => {\n        if (users.indexOf(process.user) === -1) {\n          users.push(process.user);\n        }\n      });\n      let usersOptions = [{\n        value: 'ALL_USERS',\n        label: this.$t('$common.all_users'),\n        fixed_index: 0\n      }];\n      users.forEach(username => {\n        usersOptions.push({\n          value: username,\n          label: username\n        });\n      });\n      this.topLine.options.user = usersOptions;\n    },\n\n    postPromocode(postData) {\n      let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      this.$store.state.axios.post('/processes', postData).then(response => {\n        console.log(\"[Processes.vue]: postPromocode(response): \", response);\n\n        if (response.status === 200) {\n          if (this.index !== null) {\n            this.$store.commit('removeModal', index);\n            this.$store.commit('addNotification', {\n              text: `${this.$t('$notifications.process_started')}`,\n              color: 'green'\n            });\n          }\n\n          this.fetchData();\n        }\n      }).catch(error => {\n        console.log(\"[Processes.vue]: postPromocode(error): \", error);\n        this.$store.commit('addNotification', {\n          text: `${this.$t('$notifications.process_started_failed')}`,\n          color: 'red'\n        });\n      });\n    },\n\n    putPromocode(putData) {\n      let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      let indexMaterial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      let id = putData.id;\n      delete putData.id;\n\n      if (id !== null) {\n        this.$store.state.axios.post(`/processs/${id}`, putData).then(response => {\n          console.log(\"[Processes.vue]: postPromocode(response): \", response);\n\n          if (response.status === 200) {\n            if (this.index !== null) {\n              this.$store.commit('removeModal', index);\n            }\n\n            if (indexMaterial !== null && indexMaterial >= 0 && indexMaterial < this.materials.length) {\n              // this.materials[indexMaterial] = response.data;\n              let materials = this.$panel.clone(this.materials);\n              materials[indexMaterial] = response.data;\n              this.materials = materials;\n            } // this.fetchData();\n\n          }\n        }).catch(error => {\n          console.log(\"[Processes.vue]: postPromocode(error): \", error);\n        });\n      }\n    },\n\n    fetchData() {\n      // let args = {};\n      // for (let key in this.topLineDefault) {\n      //     if (this.topLine[key] !== this.topLineDefault[key]) {\n      //         args[key] = this.topLine[key];\n      //     }\n      // }\n      // console.log(args);\n      this.$store.state.axios.get('/processes').then(response => {\n        console.log(\"[Processes.vue]: fetchData(response): \", response);\n\n        if (response.status === 200) {\n          this.materials = response.data;\n          this.updateSelect(this.materials);\n          this.globalSort();\n          this.isUpdate = true;\n        }\n      }).catch(error => {\n        console.log(\"[Processes.vue]: fetchData(error): \", error);\n      });\n    }\n\n  }\n};",{"version":3,"sources":["Processes.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,OAAA,cAAA,MAAA,0CAAA;AACA,OAAA,eAAA,MAAA,kDAAA;AACA,OAAA,aAAA,MAAA,yCAAA;AACA,OAAA,eAAA,MAAA,kDAAA;;AAEA,MAAA,UAAA,GAAA,MAAA;AAAA;AAAA,oCAAA,CAAA;;AACA,MAAA,gBAAA,GAAA,MAAA;AAAA;AAAA,0CAAA,CAAA;;AACA,eAAA;AACA,EAAA,IAAA,EAAA,eADA;AAEA,EAAA,aAAA,EAAA,eAFA;AAGA,EAAA,UAAA,EAAA;AACA,IAAA,cADA;AAEA,IAAA,aAFA;AAGA,IAAA,eAHA;AAGA,IAAA;AAHA,GAHA;;AAQA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,YAAA,EAAA,EADA;AAEA,MAAA,SAAA,EAAA,EAFA;AAGA,MAAA,aAAA,EAAA;AACA,QAAA,QAAA,EAAA,CAAA;AACA;AAAA,UAAA,KAAA,EAAA,KAAA,EAAA,CAAA,sBAAA,CAAA;AAAA,UAAA,cAAA,EAAA,wBAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SADA,EAEA;AAAA,UAAA,KAAA,EAAA,KAAA,EAAA,CAAA,mBAAA,CAAA;AAAA,UAAA,cAAA,EAAA,8BAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SAFA,EAGA;AAAA,UAAA,KAAA,EAAA,KAAA,EAAA,CAAA,qBAAA,CAAA;AAAA,UAAA,cAAA,EAAA,mDAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SAHA,EAIA;AAAA,UAAA,KAAA,EAAA,KAAA,EAAA,CAAA,qBAAA,CAAA;AAAA,UAAA,cAAA,EAAA,wBAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SAJA,EAKA;AAAA,UAAA,KAAA,EAAA,KAAA,EAAA,CAAA,sBAAA,CAAA;AAAA,UAAA,cAAA,EAAA,uBAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SALA,EAMA;AAAA,UAAA,KAAA,EAAA,KAAA,EAAA,CAAA,sBAAA,CAAA;AAAA,UAAA,cAAA,EAAA,sCAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SANA,EAOA;AAAA,UAAA,KAAA,EAAA,KAAA,EAAA,CAAA,qBAAA,CAAA;AAAA,UAAA,cAAA,EAAA,oDAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SAPA,EAQA;AAAA,UAAA,KAAA,EAAA,KAAA,EAAA,CAAA,qBAAA,CAAA;AAAA,UAAA,cAAA,EAAA,wDAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SARA,EASA;AAAA,UAAA,KAAA,EAAA,KAAA,EAAA,CAAA,qBAAA,CAAA;AAAA,UAAA,cAAA,EAAA,sBAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SATA,EAUA;AAAA,UAAA,KAAA,EAAA,KAAA,EAAA,CAAA,uBAAA,CAAA;AAAA,UAAA,cAAA,EAAA,yBAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SAVA,EAWA;AAAA,UAAA,KAAA,EAAA,KAAA,EAAA,CAAA,sBAAA,CAAA;AAAA,UAAA,cAAA,EAAA,6BACA,qBADA,GAEA,gCAFA,GAGA,4BAHA,GAIA,uBAJA,GAKA,eALA,GAMA,2BANA,GAOA,kCAPA,GAQA,4CARA,GASA,4CATA,GAUA,6DAVA,GAWA,yCAXA,GAYA,gCAZA,GAaA,qDAbA,GAcA,qCAdA;AAcA,UAAA,KAAA,EAAA;AAdA,SAXA,EA0BA;AAAA,UAAA,KAAA,EAAA,KAAA,EAAA,CAAA,oBAAA,CAAA;AAAA,UAAA,cAAA,EAAA,yDAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SA1BA,EA2BA;AAAA,UAAA,KAAA,EAAA,KAAA,EAAA,CAAA,sBAAA,CAAA;AAAA,UAAA,cAAA,EAAA,2DAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SA3BA,EA4BA;AAAA,UAAA,KAAA,EAAA,KAAA,EAAA,CAAA,uBAAA,CAAA;AAAA,UAAA,cAAA,EAAA,sIAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SA5BA,EA6BA;AAAA,UAAA,KAAA,EAAA,KAAA,EAAA,CAAA,qBAAA,CAAA;AAAA,UAAA,cAAA,EAAA,uCAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SA7BA,EA8BA;AAAA,UAAA,KAAA,EAAA,KAAA,EAAA,CAAA,qBAAA,CAAA;AAAA,UAAA,cAAA,EAAA,wCAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SA9BA,EA+BA;AAAA,UAAA,KAAA,EAAA,KAAA,EAAA,CAAA,qBAAA,CAAA;AAAA,UAAA,cAAA,EAAA,6BAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SA/BA,EAgCA;AAAA,UAAA,KAAA,EAAA,KAAA,EAAA,CAAA,qBAAA,CAAA;AAAA,UAAA,cAAA,EAAA,yBAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SAhCA,CADA;AAmCA,QAAA,QAAA,EAAA;AAnCA,OAHA;AAwCA,MAAA,cAAA,EAAA;AACA,QAAA,IAAA,EAAA;AADA,OAxCA;AA2CA,MAAA,OAAA,EAAA;AACA,QAAA,OAAA,EAAA;AACA,UAAA,IAAA,EAAA,CACA;AAAA,YAAA,KAAA,EAAA,WAAA;AAAA,YAAA,KAAA,EAAA,KAAA,EAAA,CAAA,mBAAA,CAAA;AAAA,YAAA,WAAA,EAAA;AAAA,WADA;AADA,SADA;AAMA,QAAA,IAAA,EAAA;AANA,OA3CA;AAmDA,MAAA,WAAA,EAAA,CAnDA;AAoDA,MAAA,oBAAA,EAAA,IApDA;AAoDA;AACA,MAAA,SAAA,EAAA,CArDA;AAsDA,MAAA,QAAA,EAAA;AAtDA,KAAA;AAwDA,GAjEA;;AAkEA,EAAA,QAAA,EAAA;AACA,IAAA,QAAA,GAAA;AACA,aAAA,KAAA,SAAA,GAAA,GAAA,IAAA,KAAA,SAAA,CAAA,MAAA,KAAA,CAAA;AACA;;AAHA,GAlEA;;AAuEA,EAAA,OAAA,GAAA;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,2BAAA,EAAA,KAAA,MAAA;AACA,SAAA,SAAA;AACA,SAAA,SAAA;AACA,GA3EA;;AA4EA,EAAA,OAAA,EAAA;AACA,IAAA,cAAA,GAAA;AACA,UAAA,MAAA,GAAA;AACA,QAAA,KAAA,EAAA,EADA;AAEA,QAAA,MAAA,EAAA,EAFA;AAGA,QAAA,eAAA,EAAA,EAHA;AAIA,QAAA,aAAA,EAAA;AACA,UAAA,OAAA,EAAA,IADA;AAEA,UAAA,MAAA,EAAA,CACA;AACA,YAAA,IAAA,EAAA,KADA;AAEA,YAAA,IAAA,EAAA,OAFA;AAGA,YAAA,OAAA,EAAA;AACA,cAAA,KAAA,EAAA,KAAA,EAAA,CAAA,aAAA,CADA;AAEA,cAAA,SAAA,EAAA;AAFA;AAHA,WADA,EASA;AACA,YAAA,IAAA,EAAA,YADA;AAEA,YAAA,IAAA,EAAA,OAFA;AAGA,YAAA,OAAA,EAAA;AACA,cAAA,KAAA,EAAA,KAAA,EAAA,CAAA,oBAAA,CADA;AAEA,cAAA,aAAA,EAAA;AAFA;AAHA,WATA;AAFA;AAJA,OAAA;AA0BA,aAAA,MAAA;AACA,KA7BA;;AA8BA,IAAA,gBAAA,CAAA,KAAA,EAAA;AACA;AAEA,UAAA,KAAA,WAAA,KAAA,KAAA,EAAA;AACA,aAAA,oBAAA,GAAA,CAAA,KAAA,oBAAA;AACA,OAFA,MAEA;AACA,aAAA,WAAA,GAAA,KAAA;AACA,aAAA,oBAAA,GAAA,IAAA;AACA;;AAEA,MAAA,YAAA,CAAA,OAAA,CAAA,yBAAA,EAAA,KAAA,oBAAA;AACA,MAAA,YAAA,CAAA,OAAA,CAAA,eAAA,EAAA,KAAA;AACA,WAAA,SAAA;AACA,WAAA,SAAA;AACA,KA5CA;;AA6CA,IAAA,oBAAA,CAAA,KAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,yCAAA,EAAA,KAAA;AACA,WAAA,SAAA,CAAA,QAAA;AACA,KAhDA;;AAiDA,IAAA,SAAA,CAAA,GAAA,EAAA;AAAA,UAAA,GAAA,uEAAA,IAAA;AACA,UAAA,MAAA,GAAA,KAAA,cAAA,EAAA;AACA,UAAA,KAAA,GAAA,IAAA;;AACA,UAAA,GAAA,KAAA,QAAA,EAAA;AACA,QAAA,MAAA,CAAA,KAAA,GAAA,KAAA,EAAA,CAAA,4BAAA,CAAA;AACA,QAAA,MAAA,CAAA,MAAA,GAAA,KAAA,EAAA,CAAA,gBAAA,CAAA;AACA,QAAA,MAAA,CAAA,eAAA,GAAA,QAAA;AAEA,QAAA,KAAA,GAAA;AACA,UAAA,GAAA,EAAA,EADA;AAEA,UAAA,UAAA,EAAA;AAFA,SAAA;AAIA;;AAEA,WAAA,MAAA,CAAA,MAAA,CAAA,UAAA,EAAA;AACA,QAAA,KAAA,EAAA,KADA;AAEA,QAAA,OAAA,EAAA;AACA,UAAA,MAAA,EAAA,MADA;AAEA,UAAA,QAAA,EAAA,KAAA,aAFA;AAGA,UAAA,UAAA,EAAA,GAAA,KAAA,IAAA,GAAA,IAAA,GAAA,GAAA,CAAA;AAHA,SAFA;AAOA,QAAA,SAAA,EAAA;AAPA,OAAA;AASA,KAxEA;;AAyEA,IAAA,aAAA,CAAA,KAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,kCAAA,EAAA,KAAA;;AACA,UAAA,CAAA,CAAA,KAAA,EAAA;AACA,YAAA,KAAA,CAAA,SAAA,KAAA,OAAA,EAAA;AACA,eAAA,MAAA,CAAA,MAAA,CAAA,aAAA,EAAA,KAAA,CAAA,UAAA;AACA,SAFA,MAEA,IAAA,KAAA,CAAA,SAAA,KAAA,QAAA,EAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,gBAAA;AACA,eAAA,aAAA,CAAA,KAAA,CAAA,KAAA,EAAA,KAAA,CAAA,UAAA;AACA;AACA;AACA,KAnFA;;AAoFA,IAAA,SAAA,GAAA;AACA,WAAA,SAAA,GAAA,EAAA;AACA,KAtFA;;AAuFA,IAAA,eAAA,CAAA,GAAA,EAAA,KAAA,EAAA;AACA,WAAA,OAAA,CAAA,GAAA,IAAA,KAAA;AACA,MAAA,YAAA,CAAA,OAAA,CAAA,mBAAA,GAAA,YAAA,EAAA,KAAA;AAEA,WAAA,SAAA;AACA,WAAA,SAAA;AACA,KA7FA;;AA8FA,IAAA,oBAAA,CAAA,GAAA,EAAA,YAAA,EAAA;AACA,UAAA,QAAA,GAAA,YAAA,CAAA,OAAA,CAAA,GAAA,CAAA;;AACA,UAAA,QAAA,EAAA;AACA,eAAA,QAAA;AACA,OAFA,MAEA;AACA,QAAA,YAAA,CAAA,OAAA,CAAA,GAAA,EAAA,YAAA;AACA;;AACA,aAAA,YAAA;AACA,KAtGA;;AAuGA,IAAA,SAAA,GAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,4BAAA;;AACA,WAAA,IAAA,GAAA,IAAA,KAAA,cAAA,EAAA;AACA,aAAA,OAAA,CAAA,GAAA,IAAA,KAAA,oBAAA,CAAA,mBAAA,GAAA,YAAA,EAAA,KAAA,cAAA,CAAA,GAAA,CAAA,CAAA;AACA;;AAGA,UAAA,SAAA,GAAA,KAAA,oBAAA,CAAA,eAAA,EAAA,GAAA,CAAA;AACA,WAAA,WAAA,GAAA,MAAA,CAAA,QAAA,CAAA,SAAA,EAAA,EAAA,KAAA,CAAA;AAEA,UAAA,aAAA,GAAA,KAAA,oBAAA,CAAA,yBAAA,EAAA,MAAA,CAAA;AACA,WAAA,oBAAA,GAAA,aAAA,KAAA,MAAA;AAEA,KApHA;;AAqHA,IAAA,cAAA,CAAA,KAAA,EAAA;AACA,WAAA,SAAA,GAAA,KAAA,CAAA,MAAA,CAAA,SAAA;AACA,KAvHA;;AAwHA,IAAA,YAAA,CAAA,IAAA,EAAA;AACA,UAAA,MAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,MAAA;;AACA,UAAA,MAAA,GAAA,CAAA,EAAA;AACA,eAAA,EAAA;AACA,OAFA,MAEA;AACA,YAAA,GAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EACA,GADA,CACA,GAAA,IAAA,GAAA,GAAA,IAAA,IAAA,CAAA,GAAA,CAAA,EADA,EAEA,IAFA,CAEA,GAFA,CAAA;AAGA,eAAA,MAAA,GAAA;AACA;AACA,KAlIA;;AAmIA,IAAA,mBAAA,CAAA,WAAA,EAAA,MAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,yCAAA,EAAA,WAAA;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,UAAA,EAAA;AACA,QAAA,KAAA,EAAA,KAAA,EAAA,CAAA,oCAAA,CADA;AAEA,QAAA,OAAA,EAAA;AACA,UAAA,IAAA,EAAA,KAAA,EAAA,CAAA,mCAAA,CADA;AAEA,UAAA,QAAA,EAAA,KAAA,kBAFA;AAGA,UAAA,YAAA,EAAA,KAAA,EAAA,CAAA,iBAAA,CAHA;AAIA,UAAA,QAAA,EAAA,KAAA,EAAA,CAAA,aAAA,CAJA;AAKA,UAAA,IAAA,EAAA,QALA;AAMA,UAAA,UAAA,EAAA;AAAA,YAAA,KAAA,EAAA,WAAA;AAAA,YAAA,IAAA,EAAA;AAAA,cAAA;AAAA;AAAA;AANA,SAFA;AAUA,QAAA,SAAA,EAAA;AAVA,OAAA;AAYA,KAjJA;;AAkJA,IAAA,kBAAA,CAAA,KAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,uCAAA,EAAA,KAAA;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,aAAA,EAAA,KAAA,CAAA,UAAA;;AACA,UAAA,KAAA,CAAA,KAAA,EAAA;AACA,aAAA,UAAA,CAAA,KAAA,CAAA,UAAA,CAAA,KAAA,EAAA,KAAA,CAAA,UAAA,CAAA,IAAA;AACA;AACA,KAxJA;;AAyJA,IAAA,UAAA,CAAA,YAAA,EAAA,QAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,+BAAA,EAAA,QAAA;AACA,WAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CAAA,cAAA,KAAA,YAAA,CAAA,YAAA,EAAA,GAAA,EAAA,EAAA,QAAA,EAAA,IAAA,CAAA,QAAA,IAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,sCAAA,EAAA,QAAA;;AACA,YAAA,QAAA,CAAA,MAAA,KAAA,GAAA,EAAA;AACA;AACA;AACA;AACA,eAAA,SAAA;AACA;AACA,OARA,EAQA,KARA,CAQA,KAAA,IAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,mCAAA,EAAA,KAAA;AACA,OAVA;AAWA,KAtKA;;AAuKA,IAAA,UAAA,CAAA,WAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,+BAAA,EAAA,WAAA;AACA,WAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAAA,cAAA,KAAA,YAAA,CAAA,WAAA,EAAA,GAAA,EAAA,EAAA,IAAA,CAAA,QAAA,IAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,sCAAA,EAAA,QAAA;;AACA,YAAA,QAAA,CAAA,MAAA,KAAA,GAAA,EAAA;AACA;AACA;AACA;AACA,eAAA,SAAA;AACA;AACA,OARA,EAQA,KARA,CAQA,KAAA,IAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,mCAAA,EAAA,KAAA;AACA,OAVA,EAFA,CAaA;AACA,KArLA;;AAsLA,IAAA,iBAAA,CAAA,SAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,uCAAA,EAAA,SAAA;AACA,WAAA,SAAA,CAAA,MAAA,EAAA;AAAA,QAAA,KAAA,EAAA,SAAA;AAAA,QAAA,QAAA,EAAA,KAAA,SAAA,CAAA,SAAA;AAAA,OAAA;AAEA,KA1LA;;AA2LA,IAAA,eAAA,CAAA,MAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA,OAAA,CAAA,IAAA;;AACA,UAAA,KAAA,OAAA,CAAA,IAAA,KAAA,WAAA,EAAA;AACA,eAAA,MAAA;AACA;;AACA,aAAA,MAAA,CAAA,MAAA,CAAA,OAAA,IAAA,OAAA,CAAA,IAAA,KAAA,KAAA,OAAA,CAAA,IAAA,CAAA;AACA,KAjMA;;AAkMA,IAAA,UAAA,GAAA;AACA,UAAA,SAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,KAAA,SAAA,CAAA;AACA,MAAA,SAAA,GAAA,KAAA,eAAA,CAAA,SAAA,CAAA;AACA,MAAA,SAAA,GAAA,KAAA,WAAA,CAAA,SAAA,EAAA,KAAA,WAAA,CAAA;AACA,WAAA,YAAA,GAAA,SAAA;AACA,KAvMA;;AAwMA,IAAA,WAAA,CAAA,CAAA,EAAA,OAAA,EAAA;AACA,UAAA,KAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,CAAA,CAAA;;AACA,eAAA,aAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AACA,YAAA,IAAA,GAAA,CAAA;AAAA,YACA,IAAA,GAAA,CADA;;AAEA,gBAAA,OAAA;AACA,eAAA,CAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,IAAA,CAAA,WAAA,EAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,IAAA,CAAA,WAAA,EAAA;AACA;;AACA,eAAA,CAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,CAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,CAAA;AACA;;AACA,eAAA,CAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,GAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,GAAA;AACA;;AACA,eAAA,CAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,GAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,GAAA;AACA;;AACA,eAAA,CAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,IAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,IAAA;AACA;;AACA,eAAA,CAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,IAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,IAAA;AACA;;AACA,eAAA,CAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,GAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,GAAA;AACA;;AACA,eAAA,CAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,GAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,GAAA;AACA;;AACA,eAAA,CAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,GAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,GAAA;AACA;;AACA,eAAA,CAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,KAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,KAAA;AACA;;AACA,eAAA,EAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,IAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,IAAA;AACA;;AACA,eAAA,EAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,EAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,EAAA;AACA;;AACA,eAAA,EAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,IAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,IAAA;AACA;;AACA,eAAA,EAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,KAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,KAAA;AACA;;AACA,eAAA,EAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,GAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,GAAA;AACA;;AACA,eAAA,EAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,GAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,GAAA;AACA;;AACA,eAAA,EAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,GAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,GAAA;AACA;;AACA,eAAA,EAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,GAAA,CAAA,WAAA,EAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,GAAA,CAAA,WAAA,EAAA;AACA;;AACA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,QAAA,GAAA,WAAA,EAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,QAAA,GAAA,WAAA,EAAA;AA3EA;;AA6EA,YAAA,IAAA,GAAA,IAAA,EAAA,OAAA,CAAA,CAAA;AACA,YAAA,IAAA,GAAA,IAAA,EAAA,OAAA,CAAA;AACA,eAAA,CAAA;AACA;;AACA,MAAA,KAAA,CAAA,IAAA,CAAA,aAAA;;AACA,UAAA,CAAA,KAAA,oBAAA,EAAA;AACA,QAAA,KAAA,GAAA,KAAA,CAAA,OAAA,EAAA;AACA,OAzFA,CA0FA;AACA;;;AACA,aAAA,KAAA;AACA,KArSA;;AAsSA,IAAA,YAAA,CAAA,KAAA,EAAA;AACA,UAAA,KAAA,GAAA,EAAA;AACA,MAAA,KAAA,CAAA,OAAA,CAAA,OAAA,IAAA;AACA,YAAA,KAAA,CAAA,OAAA,CAAA,OAAA,CAAA,IAAA,MAAA,CAAA,CAAA,EAAA;AACA,UAAA,KAAA,CAAA,IAAA,CAAA,OAAA,CAAA,IAAA;AACA;AACA,OAJA;AAKA,UAAA,YAAA,GAAA,CACA;AAAA,QAAA,KAAA,EAAA,WAAA;AAAA,QAAA,KAAA,EAAA,KAAA,EAAA,CAAA,mBAAA,CAAA;AAAA,QAAA,WAAA,EAAA;AAAA,OADA,CAAA;AAGA,MAAA,KAAA,CAAA,OAAA,CAAA,QAAA,IAAA;AACA,QAAA,YAAA,CAAA,IAAA,CAAA;AAAA,UAAA,KAAA,EAAA,QAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SAAA;AACA,OAFA;AAGA,WAAA,OAAA,CAAA,OAAA,CAAA,IAAA,GAAA,YAAA;AACA,KApTA;;AAqTA,IAAA,aAAA,CAAA,QAAA,EAAA;AAAA,UAAA,KAAA,uEAAA,IAAA;AACA,WAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CAAA,YAAA,EAAA,QAAA,EAAA,IAAA,CAAA,QAAA,IAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,4CAAA,EAAA,QAAA;;AACA,YAAA,QAAA,CAAA,MAAA,KAAA,GAAA,EAAA;AACA,cAAA,KAAA,KAAA,KAAA,IAAA,EAAA;AACA,iBAAA,MAAA,CAAA,MAAA,CAAA,aAAA,EAAA,KAAA;AACA,iBAAA,MAAA,CAAA,MAAA,CAAA,iBAAA,EAAA;AACA,cAAA,IAAA,EAAA,GAAA,KAAA,EAAA,CAAA,gCAAA,CAAA,EADA;AAEA,cAAA,KAAA,EAAA;AAFA,aAAA;AAIA;;AACA,eAAA,SAAA;AACA;AACA,OAZA,EAYA,KAZA,CAYA,KAAA,IAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,yCAAA,EAAA,KAAA;AACA,aAAA,MAAA,CAAA,MAAA,CAAA,iBAAA,EAAA;AACA,UAAA,IAAA,EAAA,GAAA,KAAA,EAAA,CAAA,uCAAA,CAAA,EADA;AAEA,UAAA,KAAA,EAAA;AAFA,SAAA;AAIA,OAlBA;AAmBA,KAzUA;;AA0UA,IAAA,YAAA,CAAA,OAAA,EAAA;AAAA,UAAA,KAAA,uEAAA,IAAA;AAAA,UAAA,aAAA,uEAAA,IAAA;AACA,UAAA,EAAA,GAAA,OAAA,CAAA,EAAA;AACA,aAAA,OAAA,CAAA,EAAA;;AACA,UAAA,EAAA,KAAA,IAAA,EAAA;AACA,aAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CAAA,aAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,CAAA,QAAA,IAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,4CAAA,EAAA,QAAA;;AACA,cAAA,QAAA,CAAA,MAAA,KAAA,GAAA,EAAA;AACA,gBAAA,KAAA,KAAA,KAAA,IAAA,EAAA;AACA,mBAAA,MAAA,CAAA,MAAA,CAAA,aAAA,EAAA,KAAA;AACA;;AACA,gBAAA,aAAA,KAAA,IAAA,IAAA,aAAA,IAAA,CAAA,IAAA,aAAA,GAAA,KAAA,SAAA,CAAA,MAAA,EAAA;AACA;AACA,kBAAA,SAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,KAAA,SAAA,CAAA;AACA,cAAA,SAAA,CAAA,aAAA,CAAA,GAAA,QAAA,CAAA,IAAA;AACA,mBAAA,SAAA,GAAA,SAAA;AACA,aATA,CAUA;;AACA;AACA,SAdA,EAcA,KAdA,CAcA,KAAA,IAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,yCAAA,EAAA,KAAA;AACA,SAhBA;AAiBA;AACA,KAhWA;;AAiWA,IAAA,SAAA,GAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,WAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,GAAA,CAAA,YAAA,EAAA,IAAA,CAAA,QAAA,IAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,wCAAA,EAAA,QAAA;;AACA,YAAA,QAAA,CAAA,MAAA,KAAA,GAAA,EAAA;AACA,eAAA,SAAA,GAAA,QAAA,CAAA,IAAA;AACA,eAAA,YAAA,CAAA,KAAA,SAAA;AACA,eAAA,UAAA;AACA,eAAA,QAAA,GAAA,IAAA;AACA;AACA,OARA,EAQA,KARA,CAQA,KAAA,IAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,qCAAA,EAAA,KAAA;AACA,OAVA;AAYA;;AAvXA;AA5EA,CAAA","sourcesContent":["<template lang=\"pug\">\ndiv#page-processes.scroll-container.overflow-hidden-auto.back_white(\n    @scroll=\"scrollFunction\"\n)\n    div.width-window\n        top-line-content\n            div.top-line__slot(slot=\"top-line-content__start\")\n                select-component.top-line__select.inline-block(\n                    v-for=\"(opt, keyOpt, indexOpt) in topLine.options\"\n                    :key=\"keyOpt\"\n                    :value=\"!isUpdate ? '' : topLine[keyOpt]\"\n                    :options=\"opt\"\n                    @input=\"handleTopSelect(keyOpt, $event)\"\n                )\n            div.top-line__slot(slot=\"top-line-content__end\")\n                div.top-line__button.btn-cyan.text-center(@click=\"handleClickTopButton\") {{ $t('$buttons.new') }}\n    div.width-window.material__title-names.back_white(\n        :class=\"{ 'material__title-names-border-no': noBorder }\"\n    )\n        material-title(\n            :value=\"currentSort\"\n            :direction=\"currentSortDirection\"\n            :materialTitle=\"materialTitle\"\n            @input=\"handleInputTitle\"\n        )\n    div.width-window.material-list\n        div.panel-container\n            material-process(\n                v-for=\"(material, index) in curMaterials\"\n                :data=\"material\"\n                :key=\"index\"\n                @onSignal=\"handleSignalElement(index, $event)\"\n                @onEdit=\"handleEditElement(index)\"\n            )\n</template>\n\n<script>\nimport TopLineContent from '@/components/elements/TopLineContent.vue';\nimport SelectComponent from '@/components/elements/fields/SelectComponent.vue';\nimport MaterialTitle from '@/components/elements/MaterialTitle.vue';\nimport MaterialProcess from '@/components/materials/lines/MaterialProcess.vue';\n\nconst MessageBox = () => import(/* webpackChunkName: \"MessageBox\" */ '@/components/modals/MessageBox.vue');\nconst EditProcessModal = () => import( /* webpackChunkName: \"EditProcessModal\" */ '@/components/modals/EditProcessModal.vue')\nexport default {\n    name: 'PageProcesses',\n    nameComponent: 'PageProcesses',\n    components: {\n        TopLineContent,\n        MaterialTitle,\n        SelectComponent, MaterialProcess\n    },\n    data() {\n        return {\n            curMaterials: [],\n            materials: [],\n            materialTitle: {\n                elements: [                                 // white-space: pre-line;\n                    { value: this.$t('$title_material.user'), panel__tooltip: \"Имя владельца процесса\", class:\"panel__tooltip\" },\n                    { value: this.$t('$title_material.c'), panel__tooltip: \"Значение загрузки процессора\", class:\"panel__tooltip\"  },\n                    { value: this.$t('$title_material.mem'), panel__tooltip: \"Часть реальной памяти (%), используемая процессом\", class:\"panel__tooltip\"  },\n                    { value: this.$t('$title_material.pid'), panel__tooltip: \"Идентификатор процесса\", class:\"panel__tooltip\"  },\n                    { value: this.$t('$title_material.pgid'), panel__tooltip: \"Индентификатор группы\", class:\"panel__tooltip\"  },\n                    { value: this.$t('$title_material.ppid'), panel__tooltip: \"Идентификатор родительского процесса\", class:\"panel__tooltip\"  },\n                    { value: this.$t('$title_material.psr'), panel__tooltip: \"Процесс, которому в данный момент назначен процесс\", class:\"panel__tooltip\"  },\n                    { value: this.$t('$title_material.rss'), panel__tooltip: \"Размер резидентного набора (количество страниц памяти)\", class:\"panel__tooltip\"  },\n                    { value: this.$t('$title_material.sid'), panel__tooltip: \"Идентификатор сеанса\", class:\"panel__tooltip\"  },\n                    { value: this.$t('$title_material.start'), panel__tooltip: \"Время создания процесса\", class:\"panel__tooltip\"  },\n                    { value: this.$t('$title_material.stat'), panel__tooltip: \"Текущий статус процесса:\" +\n                                                                       \"\\n\\tR — выполняется\" +\n                                                                       \"\\n\\tD — ожидает записи на диск\" +\n                                                                       \"\\n\\tS — неактивен (< 20 с)\" +\n                                                                       \"\\n\\tT — приостановлен\" +\n                                                                       \"\\n\\tZ — зомби\" +\n                                                                       \"\\n\\tДополнительные флаги:\" +\n                                                                       \"\\n\\tW — процесс выгружен на диск\" +\n                                                                       \"\\n\\t< — процесс имеет повышенный приоритет\" +\n                                                                       \"\\n\\tN — процесс имеет пониженный приоритет\" +\n                                                                       \"\\n\\tL — некоторые страницы блокированы в оперативной памяти\" +\n                                                                       \"\\n\\ts — процесс является лидером сеанса\" +\n                                                                       \"\\n\\tl — является многопоточным\" +\n                                                                       \"\\n\\t+ — находится на переднем плане процесса группы\" +\n                                                                       \"\\n\\tI — процесс в состоянии простоя\", class:\"panel__tooltip\"  },\n                    { value: this.$t('$title_material.sz'), panel__tooltip: \"Размер в физических страницах основного образа процесса\", class:\"panel__tooltip\"  },\n                    { value: this.$t('$title_material.time'), panel__tooltip: \"Количество времени ЦП, затраченное на выполнение процесса\", class:\"panel__tooltip\"  },\n                    { value: this.$t('$title_material.tpgid'), panel__tooltip: \"Идентификатор группы процессов переднего плана на TTY (терминале), к которому подключен процесс, или -1 если процесс не связан с TTY\", class:\"panel__tooltip\"  },\n                    { value: this.$t('$title_material.tty'), panel__tooltip: \"Идентификатор управляяющего терминала\", class:\"panel__tooltip\"  },\n                    { value: this.$t('$title_material.uid'), panel__tooltip: \"Эффективный идентификатор пользователя\", class:\"panel__tooltip\"  },\n                    { value: this.$t('$title_material.vsz'), panel__tooltip: \"Виртуальный размер процесса\", class:\"panel__tooltip\"  },\n                    { value: this.$t('$title_material.cmd'), panel__tooltip: \"Имя и аргументы команды\", class:\"panel__tooltip\"  }\n                ],\t\n                material: 'process'\n            },\n            topLineDefault: {\n                user: 'ALL_USERS'\n            },\n            topLine: {\n                options: {\n                    user: [\n                        { value: 'ALL_USERS', label: this.$t('$common.all_users'), fixed_index: 0 },\n                    ],\n                },\n                user: ''\n            },\n            currentSort: 0,\n            currentSortDirection: true, // true ↓, false ↑\n            scrollTop: 0,\n            isUpdate: false\n        };\n    },\n    computed: {\n        noBorder() {\n            return this.scrollTop < 100 && this.materials.length !== 0;\n        }\n    },\n    created() {\n        console.log(\"[Processes.vue]: created \", this.$route);\n        this.initStart();\n        this.fetchData();\n    },\n    methods: {\n        getStructModal() {\n            let struct = {\n                title: '',\n                button: '',\n                buttonNameEvent: '',\n                sectionStruct: {\n                    options: null,\n                    fields: [\n                        {\n                            name: 'cmd',\n                            type: 'input',\n                            options: {\n                                label: this.$t('$fields.cmd'),\n                                maxLength: 80\n                            }\n                        },\n                        {\n                            name: 'attributes',\n                            type: 'input',\n                            options: {\n                                label: this.$t('$fields.attributes'),\n                                passFillValid: true,\n                            }\n                        }\n                    ]\n                }\n            };\n            return struct;\n        },\n        handleInputTitle(index) {\n            // let curIndex = index === 1 ? 0 : index;         // disabled district index 1\n \n            if (this.currentSort === index) {\n                this.currentSortDirection = !this.currentSortDirection;\n            } else {\n                this.currentSort = index;\n                this.currentSortDirection = true;\n            }\n\n            localStorage.setItem('sort_omanager_direction', this.currentSortDirection);\n            localStorage.setItem('sort_omanager', index);\n            this.clearData();\n            this.fetchData();\n        },\n        handleClickTopButton(event) {\n            console.log(\"[Processes.vue]: handleClickTopButton: \", event);\n            this.showModal('create');\n        },\n        showModal(key, obj = null) {\n            let struct = this.getStructModal();\n            let value = null;\n            if (key === 'create') {\n                struct.title = this.$t('$fields.new_public_process');\n                struct.button = this.$t('$buttons.start');\n                struct.buttonNameEvent = 'create';\n\n                value = {\n                    cmd: '',\n                    attributes: ''\n                };\n            }\n\n            this.$store.commit('addModal', {\n                value: value,\n                options: {\n                    struct: struct,\n                    callback: this.callbackModal,\n                    eventValue: obj === null ? null : obj.index\n                },\n                component: EditProcessModal\n            });\n        },\n        callbackModal(event) {\n            console.log(\"[Processes.vue]: callbackModal: \", event);\n            if (!!event) {\n                if (event.typeEvent === 'close') {\n                    this.$store.commit('removeModal', event.indexModal);\n                } else if (event.typeEvent === 'create') {\n                    console.log(\"CREATE PROCESS\");\n                    this.postPromocode(event.value, event.indexModal);\n                }\n            }\n        },\n        clearData() {\n            this.materials = [];\n        },\n        handleTopSelect(key, event) {\n            this.topLine[key] = event;\n            localStorage.setItem(`omanager-panel__${ key }-processes`, event);\n\n            this.clearData();\n            this.fetchData();\n        },\n        getLocalStorageValue(key, defaultValue) {\n            let localVar = localStorage.getItem(key);\n            if (localVar) {\n                return localVar;\n            } else {\n                localStorage.setItem(key, defaultValue);\n            }\n            return defaultValue;\n        },\n        initStart() {\n            console.log(\"[Processes.vue]: initStart\");\n            for (let key in this.topLineDefault) {\n                this.topLine[key] = this.getLocalStorageValue(`omanager-panel__${ key }-processes`, this.topLineDefault[key]);\n            }\n\n\n            let sortStart = this.getLocalStorageValue('sort_omanager', '0');\n            this.currentSort = Number.parseInt(sortStart, 10) || 0;\n\n            let sortDirection = this.getLocalStorageValue('sort_omanager_direction', 'true');\n            this.currentSortDirection = sortDirection === 'true';\n\n        },\n        scrollFunction(event) {\n            this.scrollTop = event.target.scrollTop;\n        },\n        getQueryLine(args) {\n            let length = Object.keys(args).length;\n            if (length < 1) {\n                return '';\n            } else {\n                let str = Object.keys(args)\n                                .map(key => `${ key }=${ args[key] }`)\n                                .join('&');\n                return '?' + str;\n            }\n        },\n        handleSignalElement(indexRemove, signal) {\n            console.log(\"[Promovodes.vue]: handleRemoveElement: \", indexRemove);\n            this.$store.commit('addModal', {\n                value: this.$t('$modals.message_box.question_leave'),\n                options: {\n                    text: this.$t('$modals.message_box.cannot_undone'),\n                    callback: this.callbackMessageBox,\n                    buttonCancel: this.$t('$buttons.cancel'),\n                    buttonOk: this.$t('$buttons.ok'),\n                    type: 'delete',\n                    eventValue: { index: indexRemove, data: { signal } }\n                },\n                component: MessageBox\n            });\n        },\n        callbackMessageBox(event) {\n            console.log(\"[Processes.vue]: callbackMessageBox: \", event);\n            this.$store.commit('removeModal', event.indexModal);\n            if (event.value) {\n                this.PostIdData(event.eventValue.index, event.eventValue.data);\n            }\n        },\n        PostIdData(indexElement, postData) {\n            console.log(\"[Processes.vue]: PostIdData: \", postData);\n            this.$store.state.axios.post(`/processes/${ this.curMaterials[indexElement].pid }`, postData).then(response => {\n                console.log(\"[FeedId.vue]: PostIdData(response): \", response);\n                if (response.status === 200) {\n                    // this.materials.splice(indexDelete, 1);\n                    // this.isRouteNext = true;\n                    // this.$router.replace({ path: '/feed' });\n                    this.fetchData();\n                }\n            }).catch(error => {\n                console.log(\"[FeedId.vue]: PostIdData(error): \", error);\n            })\n        },\n        deleteData(indexDelete) {\n            console.log(\"[Processes.vue]: deleteData: \", indexDelete);\n            this.$store.state.axios.delete(`/processes/${ this.curMaterials[indexDelete].pid }`).then(response => {\n                console.log(\"[FeedId.vue]: deleteFeed(response): \", response);\n                if (response.status === 200) {\n                    // this.materials.splice(indexDelete, 1);\n                    // this.isRouteNext = true;\n                    // this.$router.replace({ path: '/feed' });\n                    this.fetchData();\n                }\n            }).catch(error => {\n                console.log(\"[FeedId.vue]: deleteFeed(error): \", error);\n            })\n            // this.materials.splice(indexDelete, 1);\n        },\n        handleEditElement(indexEdit) {\n            console.log(\"[Promovodes.vue]: handleEditElement: \", indexEdit);\n            this.showModal('edit', { index: indexEdit, material: this.materials[indexEdit] });\n            \n        },\n        getFilterByUser(source) {\n            console.log(this.topLine.user);\n            if (this.topLine.user === 'ALL_USERS') {\n                return source;\n            }\n            return source.filter(process => process.user === this.topLine.user);\n        },\n        globalSort() {\n            let materials = this.$panel.clone(this.materials);\n            materials = this.getFilterByUser(materials)\n            materials = this.sortByField(materials, this.currentSort);\n            this.curMaterials = materials;\n        },\n        sortByField(v, current){\n            let array = this.$panel.clone(v)\n            function sortByCurrent(a, b){\n                let tmp1 = a,\n                    tmp2 = b;\n                switch(current) {\n                    case 0:\n                        tmp1 = a.user.toLowerCase();\n                        tmp2 = b.user.toLowerCase(); \n                        break;\n                    case 1:\n                        tmp1 = a.c;\n                        tmp2 = b.c; \n                        break;\n                    case 2: \n                        tmp1 = a.mem;\n                        tmp2 = b.mem;\n                        break;\n                    case 3:\n                        tmp1 = a.pid;\n                        tmp2 = b.pid;\n                        break;\n                    case 4: \n                        tmp1 = a.pgid;\n                        tmp2 = b.pgid;\n                        break;\n                    case 5: \n                        tmp1 = a.ppid;\n                        tmp2 = b.ppid;\n                        break;\n                    case 6: \n                        tmp1 = a.psr;\n                        tmp2 = b.psr;\n                        break;\n                    case 7: \n                        tmp1 = a.rss;\n                        tmp2 = b.rss;\n                        break;\n                    case 8: \n                        tmp1 = a.sid;\n                        tmp2 = b.sid;\n                        break;\n                    case 9: \n                        tmp1 = a.start;\n                        tmp2 = b.start;\n                        break;\n                    case 10: \n                        tmp1 = a.stat;\n                        tmp2 = b.stat;\n                        break;\n                    case 11: \n                        tmp1 = a.sz;\n                        tmp2 = b.sz;\n                        break;\n                    case 12: \n                        tmp1 = a.time;\n                        tmp2 = b.time;\n                        break;\n                    case 13: \n                        tmp1 = a.tpgid;\n                        tmp2 = b.tpgid;\n                        break;\n                    case 14: \n                        tmp1 = a.tty;\n                        tmp2 = b.tty;\n                        break;\n                    case 15: \n                        tmp1 = a.uid;\n                        tmp2 = b.uid;\n                        break;\n                    case 16: \n                        tmp1 = a.vsz;\n                        tmp2 = b.vsz;\n                        break;\n                    case 17: \n                        tmp1 = a.cmd.toLowerCase();\n                        tmp2 = b.cmd.toLowerCase();\n                        break;\n                    default:\n                        tmp1 = a.toString().toLowerCase();\n                        tmp2 = b.toString().toLowerCase();\n                }\n                if (tmp1 < tmp2) return -1;\n                if (tmp1 > tmp2) return 1;\n                return 0;\n            }\n            array.sort(sortByCurrent);\n            if (!this.currentSortDirection) {\n                array = array.reverse();\n            }\n            // console.log(Object.prototype.toString.call(array), array);\n            //console.log(this.current_sort);\n            return array;\n        },\n        updateSelect(array) {\n            let users = [];\n            array.forEach(process => {\n                if (users.indexOf(process.user) === -1) {\n                    users.push(process.user);\n                }\n            });\n            let usersOptions = [\n                { value: 'ALL_USERS', label: this.$t('$common.all_users'), fixed_index: 0 },\n            ];\n            users.forEach(username => {\n                usersOptions.push({ value: username, label: username })\n            });\n            this.topLine.options.user = usersOptions;\n        },\n        postPromocode(postData, index = null) {\n            this.$store.state.axios.post('/processes', postData).then(response => {\n                console.log(\"[Processes.vue]: postPromocode(response): \", response);\n                if (response.status === 200) {\n                    if (this.index !== null) {\n                        this.$store.commit('removeModal', index);\n                        this.$store.commit('addNotification', { \n                            text: `${ this.$t('$notifications.process_started') }`, \n                            color: 'green' \n                        });\n                    }\n                    this.fetchData();\n                }\n            }).catch(error => {\n                console.log(\"[Processes.vue]: postPromocode(error): \", error);\n                this.$store.commit('addNotification', { \n                    text: `${ this.$t('$notifications.process_started_failed') }`, \n                    color: 'red' \n                });\n            })\n        },\n        putPromocode(putData, index = null, indexMaterial = null) {\n            let id = putData.id;\n            delete putData.id;\n            if (id !== null) {\n                this.$store.state.axios.post(`/processs/${ id }`, putData).then(response => {\n                    console.log(\"[Processes.vue]: postPromocode(response): \", response);\n                    if (response.status === 200) {\n                        if (this.index !== null) {\n                            this.$store.commit('removeModal', index);\n                        }\n                        if (indexMaterial !== null && indexMaterial >= 0 && indexMaterial < this.materials.length) {\n                            // this.materials[indexMaterial] = response.data;\n                            let materials = this.$panel.clone(this.materials);\n                            materials[indexMaterial] = response.data;\n                            this.materials = materials;\n                        }\n                        // this.fetchData();\n                    }\n                }).catch(error => {\n                    console.log(\"[Processes.vue]: postPromocode(error): \", error);\n                })\n            }\n        },\n        fetchData() {\n            // let args = {};\n            \n            // for (let key in this.topLineDefault) {\n            //     if (this.topLine[key] !== this.topLineDefault[key]) {\n            //         args[key] = this.topLine[key];\n            //     }\n            // }\n            // console.log(args);\n\n            this.$store.state.axios.get('/processes').then(response => {\n                console.log(\"[Processes.vue]: fetchData(response): \", response);\n                if (response.status === 200) {\n                    this.materials = response.data;\n                    this.updateSelect(this.materials);\n                    this.globalSort();\n                    this.isUpdate = true;\n                }\n            }).catch(error => {\n                console.log(\"[Processes.vue]: fetchData(error): \", error);\n            });\n            \n        },\n    }\n}\n</script>\n\n<style lang=\"scss\">\n#page-processes {\n    position: relative;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: calc(100vh - 60px);\n    box-sizing: border-box;\n    padding-bottom: 60px;\n    & .top-line {\n        &__slot {\n\n        }\n        &__select {\n            width: 250px;\n        }\n        &__button {\n            min-width: 150px;\n            padding: 10px 20px;\n            box-sizing: border-box;\n        }\n    }\n    & .material {\n        &__title-names {\n            border-bottom: 1px solid $grey10;\n            position: -webkit-sticky; /* Required for Safari */\n            position: sticky;\n            top: -20px;\n            z-index: 100;\n            margin-bottom: -1px;\n            &-border-no {\n                border-bottom: none;\n                margin-bottom: 0px;\n            }\n        }\n    }\n}\n</style>"],"sourceRoot":"src/views"}]}