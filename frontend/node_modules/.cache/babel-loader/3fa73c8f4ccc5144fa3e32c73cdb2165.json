{"remainingRequest":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/babel-loader/lib/index.js!/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/src/assets/js/templates.js","dependencies":[{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/src/assets/js/templates.js","mtime":1570430291964},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["// import words from '@/assets/languages/ru.json';\n// const templateWords = words.messages.$common.template_words;\n// const NOT_I18n = Object.keys(templateWords).reduce((obj, key) => {\n//     obj[`$common.template_words.${ key }`] = templateWords[key];\n//     return obj;\n// }, {});\n// const localInterfaceWords = {\n//     '$t': str => (NOT_I18n[str] || str)\n// };\n// /**\n//  * Select name by number from array\n//  * @param { Number } value \n//  * @param { Array } array const array[3] = [ name, names, names_s ], else '';\n//  * @returns { String }\n//  */\n// const nameSelection = function(value, array) {\n//     let curValue = Math.abs(value);\n//     if (array.length === 3) {\n//         let str = array[1];                                 // names\n//         if (curValue < 5 || curValue > 20) {\n//             let lastNumber = curValue % 10;\n//             if (lastNumber === 1) {\n//                 str = array[0];                                 // name\n//             } else if (lastNumber > 1 && lastNumber < 5) {\n//                 str = array[2]                                  // names_s\n//             }\n//         }\n//         return str;\n//     }\n//     return '';\n// }\n// /**\n//  * return interface for select words\n//  * @param { Object } f returned if !!f\n//  * @param { Object } d return default if !f \n//  */\n// const getInterfaceWords = function(f, d) {\n//     return (f === null || f === undefined) ? d : f;\n// }\n// /**\n//  * return Array words\n//  * @param { String } type \n//  * @param { Object } interfaceWords\n//  * @returns { Any } return Array[3] or Null object. if type not found;\n//  */\n// const getWordsFromInterface = function(type, interfaceWords) {\n//     let types = {\n//         'ALBUM': [ interfaceWords.$t(\"$common.template_words.album\"), interfaceWords.$t(\"$common.template_words.albums\"), interfaceWords.$t(\"$common.template_words.albums_s\") ],\n//         \"HOUR\": [ interfaceWords.$t(\"$common.template_words.hour\"), interfaceWords.$t(\"$common.template_words.hours\"), interfaceWords.$t(\"$common.template_words.hours_s\") ],\n//         'MAKEUP_ARTIST': [ interfaceWords.$t(\"$common.template_words.makeup_artist\"), interfaceWords.$t(\"$common.template_words.makeup_artists\"), interfaceWords.$t(\"$common.template_words.makeup_artists_s\") ],\n//         'PHOTOGRAPHER': [ interfaceWords.$t(\"$common.template_words.photographer\"), interfaceWords.$t(\"$common.template_words.photographers\"), interfaceWords.$t(\"$common.template_words.photographers_s\") ],\n//         'SLIDE': [ interfaceWords.$t(\"$common.template_words.slide\"), interfaceWords.$t(\"$common.template_words.slides\"), interfaceWords.$t(\"$common.template_words.slides_s\") ],\n//         'USER': [ interfaceWords.$t(\"$common.template_words.user\"), interfaceWords.$t(\"$common.template_words.users\"), interfaceWords.$t(\"$common.template_words.users_s\") ],\n//     }\n//     return types[type] || null;\n// }\n// /**\n//  * @param { Number } type type of Template\n//  * @param { Object } interfaceWords Interface for return words by key\n//  * @param { Boolean } notNegativeFlag not negative number or any number\n//  * @param { Boolean } onlyWordFlag return template `{number} word`, or only `word`\n//  */\n// Number.prototype.toTemplate = function(type, interfaceWords = null, notNegativeFlag = true, onlyWordFlag = false) {\n//     // console.log(\"[template.js]: toTemplate: \", type, interfaceWords, notNegativeFlag, onlyWordFlag);\n//     if (!isNaN(this) &&\n//         Object.prototype.toString.call(type) === '[object String]' &&\n//         type.length > 0) {\n//         if (!notNegativeFlag && this < 0) {\n//             return '';\n//         }\n//         let app = getInterfaceWords(interfaceWords, localInterfaceWords);\n//         let arrayWords = getWordsFromInterface(type, app);\n//         if (arrayWords === null) {\n//             return '';\n//         }\n//         let returnValue = nameSelection(this, arrayWords);\n//         if (onlyWordFlag) {\n//             return returnValue;\n//         }\n//         return `${ this } ${ returnValue }`;\n//     }\n//     return '';\n// }\n// String.prototype.toPhoneFormat = function() {\n//     // console.log('[templates.js]: toPhoneFormat: ', this);\n//     if (this.length === 11) {\n//         return `+${ this.charAt(0) } ${ this.substr(1, 3) } ${ this.substr(4, 3) } ${ this.substr(7) }`\n//     }\n//     return '';\n// }\n// // Number.prototype.toVolunteerTemplate = function(f) {\n// //     console.log(\"[templates.js]: toVolunteerTemplte: \",\"target: \", this, \" function: \", f);\n// //     if (!isNaN(this)) {\n// //         let app = (f === null || f === undefined) ? curTemplates : f;\n// //         let str = app.$t('$common.template_words.volunteers');       // волонтера\n// //         if (this === 1) {\n// //             str = app.$t('$common.template_words.volunteer');        // волонтер\n// //         } else if (this > 1 && this < 5) {\n// //             str = app.$t('$common.template_words.volunteers_s');     // волонтеров\n// //         }\n// //         return `${ this } ${ str.toLowerCase() }`;\n// //     }\n// //     return '';\n// // }\n// // Number.prototype.toYearsTemplate = function(f) {\n// //     console.log(\"[templates.js]: toYearsTemplate: \", this, f);\n// //     if (!isNaN(this) || this >= 0) {\n// //         let app = (f === null || f === undefined) ? curTemplates : f;\n// //         let str = app.$t('$common.template_words.years');    // лет\n// //         if (this < 5 || this > 20) {                // лет 5-20\n// //             let lastNumber = this % 10;\n// //             if (lastNumber === 1) {\n// //                 str = app.$t('$common.template_words.year');     // год\n// //             } else if (lastNumber > 1 && lastNumber < 5) {\n// //                 str = app.$t('$common.template_words.year_s');    // года\n// //             }\n// //         }\n// //         return `${ this } ${ str.toLowerCase() }`;\n// //     }\n// //     return '';\n// // }\n// // String.prototype.toPhoneFormat = function() {\n// //     console.log('[templates.js]: toPhoneFormat: ', this);\n// //     if (this.length === 11) {\n// //         return `+${ this.charAt(0) } ${ this.substr(1, 3) } ${ this.substr(4, 3) } ${ this.substr(7) }`\n// //     }\n// //     return '';\n// // }\n// // Boolean.prototype.toConfirmTemplate = function(f) {\n// //     console.log('[templates.js]: toConfirmTemplate', this, f);\n// //     let app = (f === null || f === undefined) ? curTemplates : f;\n// //     return this ? app.$t('$fields.participation_confirmed').toLowerCase() : app.$t('$fields.not_participate').toLowerCase();\n// // }\n// // Number.prototype.toPointTemplate = function(f) {\n// //     console.log('[templates.js]: toPointTemplate: ', this, f);\n// //     if (!isNaN(this) || this >= 0) {\n// //         let app = (f === null || f === undefined) ? curTemplates : f;\n// //         let str = app.$t('$common.template_words.points');    // баллов\n// //         if (this < 5 || this > 20) {                 // баллов 5-20\n// //             let lastNumber = this % 10;            \n// //             if (lastNumber === 1) {\n// //                 str = app.$t('$common.template_words.point');     // балл\n// //             } else if (lastNumber > 1 && lastNumber < 5) {\n// //                 str = app.$t('$common.template_words.points_s');    // балла\n// //             }\n// //         }\n// //         return `${ this } ${ str.toLowerCase() }`;\n// //     }\n// //     return '';\n// // }\n// // Number.prototype.toApplicationTemplate = function(f) {\n// //     console.log('[templates.js]: toApplicationTemplate: ', this, f);\n// //     if (!isNaN(this) || this >= 0) {\n// //         let app = (f === null || f === undefined) ? curTemplates : f;\n// //         let str = app.$t('$common.template_words.applications');    // заявок\n// //         if (this < 5 || this > 20) {                 // заявок 5-20\n// //             let lastNumber = this % 10;            \n// //             if (lastNumber === 1) {\n// //                 str = app.$t('$common.template_words.application');     // заявка\n// //             } else if (lastNumber > 1 && lastNumber < 5) {\n// //                 str = app.$t('$common.template_words.applications_s');    // заявки\n// //             }\n// //         }\n// //         return `${ this } ${ str.toLowerCase() }`;\n// //     }\n// //     return '';\n// // }",{"version":3,"sources":["/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/src/assets/js/templates.js"],"names":[],"mappingssourcesContent":["// import words from '@/assets/languages/ru.json';\n\n// const templateWords = words.messages.$common.template_words;\n// const NOT_I18n = Object.keys(templateWords).reduce((obj, key) => {\n//     obj[`$common.template_words.${ key }`] = templateWords[key];\n//     return obj;\n// }, {});\n\n// const localInterfaceWords = {\n//     '$t': str => (NOT_I18n[str] || str)\n// };\n\n// /**\n//  * Select name by number from array\n//  * @param { Number } value \n//  * @param { Array } array const array[3] = [ name, names, names_s ], else '';\n//  * @returns { String }\n//  */\n// const nameSelection = function(value, array) {\n\n//     let curValue = Math.abs(value);\n\n//     if (array.length === 3) {\n//         let str = array[1];                                 // names\n//         if (curValue < 5 || curValue > 20) {\n//             let lastNumber = curValue % 10;\n//             if (lastNumber === 1) {\n//                 str = array[0];                                 // name\n//             } else if (lastNumber > 1 && lastNumber < 5) {\n//                 str = array[2]                                  // names_s\n//             }\n//         }\n//         return str;\n//     }\n//     return '';\n// }\n\n// /**\n//  * return interface for select words\n//  * @param { Object } f returned if !!f\n//  * @param { Object } d return default if !f \n//  */\n// const getInterfaceWords = function(f, d) {\n//     return (f === null || f === undefined) ? d : f;\n// }\n\n// /**\n//  * return Array words\n//  * @param { String } type \n//  * @param { Object } interfaceWords\n//  * @returns { Any } return Array[3] or Null object. if type not found;\n//  */\n// const getWordsFromInterface = function(type, interfaceWords) {\n//     let types = {\n//         'ALBUM': [ interfaceWords.$t(\"$common.template_words.album\"), interfaceWords.$t(\"$common.template_words.albums\"), interfaceWords.$t(\"$common.template_words.albums_s\") ],\n//         \"HOUR\": [ interfaceWords.$t(\"$common.template_words.hour\"), interfaceWords.$t(\"$common.template_words.hours\"), interfaceWords.$t(\"$common.template_words.hours_s\") ],\n//         'MAKEUP_ARTIST': [ interfaceWords.$t(\"$common.template_words.makeup_artist\"), interfaceWords.$t(\"$common.template_words.makeup_artists\"), interfaceWords.$t(\"$common.template_words.makeup_artists_s\") ],\n//         'PHOTOGRAPHER': [ interfaceWords.$t(\"$common.template_words.photographer\"), interfaceWords.$t(\"$common.template_words.photographers\"), interfaceWords.$t(\"$common.template_words.photographers_s\") ],\n//         'SLIDE': [ interfaceWords.$t(\"$common.template_words.slide\"), interfaceWords.$t(\"$common.template_words.slides\"), interfaceWords.$t(\"$common.template_words.slides_s\") ],\n//         'USER': [ interfaceWords.$t(\"$common.template_words.user\"), interfaceWords.$t(\"$common.template_words.users\"), interfaceWords.$t(\"$common.template_words.users_s\") ],\n//     }\n//     return types[type] || null;\n// }\n// /**\n//  * @param { Number } type type of Template\n//  * @param { Object } interfaceWords Interface for return words by key\n//  * @param { Boolean } notNegativeFlag not negative number or any number\n//  * @param { Boolean } onlyWordFlag return template `{number} word`, or only `word`\n//  */\n// Number.prototype.toTemplate = function(type, interfaceWords = null, notNegativeFlag = true, onlyWordFlag = false) {\n//     // console.log(\"[template.js]: toTemplate: \", type, interfaceWords, notNegativeFlag, onlyWordFlag);\n//     if (!isNaN(this) &&\n//         Object.prototype.toString.call(type) === '[object String]' &&\n//         type.length > 0) {\n\n//         if (!notNegativeFlag && this < 0) {\n//             return '';\n//         }\n//         let app = getInterfaceWords(interfaceWords, localInterfaceWords);\n//         let arrayWords = getWordsFromInterface(type, app);\n//         if (arrayWords === null) {\n//             return '';\n//         }\n//         let returnValue = nameSelection(this, arrayWords);\n//         if (onlyWordFlag) {\n//             return returnValue;\n//         }\n//         return `${ this } ${ returnValue }`;\n//     }\n//     return '';\n// }\n// String.prototype.toPhoneFormat = function() {\n//     // console.log('[templates.js]: toPhoneFormat: ', this);\n//     if (this.length === 11) {\n//         return `+${ this.charAt(0) } ${ this.substr(1, 3) } ${ this.substr(4, 3) } ${ this.substr(7) }`\n//     }\n//     return '';\n// }\n// // Number.prototype.toVolunteerTemplate = function(f) {\n// //     console.log(\"[templates.js]: toVolunteerTemplte: \",\"target: \", this, \" function: \", f);\n// //     if (!isNaN(this)) {\n// //         let app = (f === null || f === undefined) ? curTemplates : f;\n\n// //         let str = app.$t('$common.template_words.volunteers');       // волонтера\n// //         if (this === 1) {\n// //             str = app.$t('$common.template_words.volunteer');        // волонтер\n// //         } else if (this > 1 && this < 5) {\n// //             str = app.$t('$common.template_words.volunteers_s');     // волонтеров\n// //         }\n// //         return `${ this } ${ str.toLowerCase() }`;\n// //     }\n// //     return '';\n// // }\n\n// // Number.prototype.toYearsTemplate = function(f) {\n// //     console.log(\"[templates.js]: toYearsTemplate: \", this, f);\n// //     if (!isNaN(this) || this >= 0) {\n// //         let app = (f === null || f === undefined) ? curTemplates : f;\n// //         let str = app.$t('$common.template_words.years');    // лет\n// //         if (this < 5 || this > 20) {                // лет 5-20\n// //             let lastNumber = this % 10;\n// //             if (lastNumber === 1) {\n// //                 str = app.$t('$common.template_words.year');     // год\n// //             } else if (lastNumber > 1 && lastNumber < 5) {\n// //                 str = app.$t('$common.template_words.year_s');    // года\n// //             }\n// //         }\n// //         return `${ this } ${ str.toLowerCase() }`;\n// //     }\n// //     return '';\n// // }\n// // String.prototype.toPhoneFormat = function() {\n// //     console.log('[templates.js]: toPhoneFormat: ', this);\n// //     if (this.length === 11) {\n// //         return `+${ this.charAt(0) } ${ this.substr(1, 3) } ${ this.substr(4, 3) } ${ this.substr(7) }`\n// //     }\n// //     return '';\n// // }\n\n// // Boolean.prototype.toConfirmTemplate = function(f) {\n// //     console.log('[templates.js]: toConfirmTemplate', this, f);\n// //     let app = (f === null || f === undefined) ? curTemplates : f;\n// //     return this ? app.$t('$fields.participation_confirmed').toLowerCase() : app.$t('$fields.not_participate').toLowerCase();\n// // }\n\n// // Number.prototype.toPointTemplate = function(f) {\n// //     console.log('[templates.js]: toPointTemplate: ', this, f);\n// //     if (!isNaN(this) || this >= 0) {\n// //         let app = (f === null || f === undefined) ? curTemplates : f;\n// //         let str = app.$t('$common.template_words.points');    // баллов\n// //         if (this < 5 || this > 20) {                 // баллов 5-20\n// //             let lastNumber = this % 10;            \n// //             if (lastNumber === 1) {\n// //                 str = app.$t('$common.template_words.point');     // балл\n// //             } else if (lastNumber > 1 && lastNumber < 5) {\n// //                 str = app.$t('$common.template_words.points_s');    // балла\n// //             }\n// //         }\n// //         return `${ this } ${ str.toLowerCase() }`;\n// //     }\n// //     return '';\n// // }\n\n// // Number.prototype.toApplicationTemplate = function(f) {\n// //     console.log('[templates.js]: toApplicationTemplate: ', this, f);\n// //     if (!isNaN(this) || this >= 0) {\n// //         let app = (f === null || f === undefined) ? curTemplates : f;\n// //         let str = app.$t('$common.template_words.applications');    // заявок\n// //         if (this < 5 || this > 20) {                 // заявок 5-20\n// //             let lastNumber = this % 10;            \n// //             if (lastNumber === 1) {\n// //                 str = app.$t('$common.template_words.application');     // заявка\n// //             } else if (lastNumber > 1 && lastNumber < 5) {\n// //                 str = app.$t('$common.template_words.applications_s');    // заявки\n// //             }\n// //         }\n// //         return `${ this } ${ str.toLowerCase() }`;\n// //     }\n// //     return '';\n// // }"]}]}