{"remainingRequest":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/babel-loader/lib/index.js!/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/src/components/elements/fields/BlocksComponent.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/src/components/elements/fields/BlocksComponent.vue","mtime":1570715927042},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport VueDraggable from 'vuedraggable';\nimport ScriptBlock from '@/components/elements/fields/block/ScriptBlock.vue'; // import DropdownContent from '@/components/Dropdown/DropdownContent.vue'\n// import ParagraphContent from '@/components/Fields/Additional/ParagraphContent.vue'\n// import ImageContent from '@/components/Fields/Additional/ImageContent.vue'\n\nimport ParagraphIcon from 'icons/Paragraph.svg'; // import ImageIcon from 'icon/Image.svg'\n\nexport default {\n  name: 'BlocksComponent',\n  componentName: 'BlocksComponent',\n  components: {\n    VueDraggable: VueDraggable,\n    ScriptBlock: ScriptBlock,\n    ParagraphIcon: ParagraphIcon\n  },\n  props: {\n    value: {\n      type: Array,\n      required: null\n    },\n    optionsDraggable: {\n      type: Object,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      curValue: [],\n      createdID: ''\n    };\n  },\n  created: function created() {\n    this.$store.commit('incObjectID');\n    this.createdID = this.$store.getters.getObjectID;\n  },\n  watch: {\n    value: {\n      handler: function handler(newValue, oldValue) {\n        this.curValue = this.$panel.clone(newValue);\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    inputDraggableHandle: function inputDraggableHandle(values) {\n      console.log(values);\n      this.$emit('input', values);\n    },\n    inputHandle: function inputHandle(index, value) {\n      var tmp = this.$panel.clone(this.curValue);\n      tmp[index] = value;\n      this.$emit('input', tmp);\n    },\n    removeHandle: function removeHandle(index) {\n      var tmp = this.$panel.clone(this.curValue);\n      tmp.splice(index, 1);\n      this.$emit('input', tmp);\n    },\n    addHandle: function addHandle() {\n      console.log(\"ADD HANDLE\");\n      var tmp = this.$panel.clone(this.curValue);\n      tmp.push({\n        id: -1,\n        text: '#!/bin/bash\\n',\n        position: -1,\n        status: 'NEW'\n      });\n      this.$emit('input', tmp);\n    } //     onRemove(index){\n    //         if (!!this.options.disabled && this.options.disabled){\n    //             return;\n    //         }\n    //         this.value.splice(index, 1);\n    //     },\n    //     addParagraph: function(){\n    //         if (!!this.options.disabled && this.options.disabled){\n    //             return;\n    //         }\n    //         this.value.push({\n    //             type: 'TEXT', //enum('paragraph', 'image'),\n    //             content: {\n    //                 // Paragraph blocks\n    //                 text: {\n    //                     en: '',\n    //                     ru: ''\n    //                 },// Image block\n    //             }\n    //         });\n    //     },\n    //     addImage: function(){\n    //         if (!!this.options.disabled && this.options.disabled){\n    //             return;\n    //         }\n    //         this.value.push({\n    //             type: 'IMAGE', //enum('paragraph', 'image'),\n    //             content: {\n    //                 image: null,\n    //                 caption: {\n    //                     en: '',\n    //                     ru: ''\n    //                 }\n    //             }\n    //         });\n    //     },\n    //     editBlock(index, v){\n    //         if (!!this.options.disabled && this.options.disabled){\n    //             return;\n    //         }\n    //         let new_value = this.value;\n    //         new_value[index].content = v;\n    //         //console.log(new_value);\n    //         this.$emit('input', new_value);\n    //     },\n    //     edit(v){\n    //         if (!!this.options.disabled && this.options.disabled){\n    //             return;\n    //         }\n    //         //console.log('edit', v);\n    //         //this.value.splice(0, this.value.length).push.apply(this.value, v);\n    //         //console.log(this.value);\n    //         this.$emit('input', v);\n    //         this.changeKey = !this.changeKey;\n    //     },\n\n  }\n};",{"version":3,"sources":["BlocksComponent.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAA,YAAA,MAAA,cAAA;AACA,OAAA,WAAA,MAAA,oDAAA,C,CAEA;AAEA;AACA;;AAGA,OAAA,aAAA,MAAA,qBAAA,C,CACA;;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,iBADA;AAEA,EAAA,aAAA,EAAA,iBAFA;AAGA,EAAA,UAAA,EAAA;AACA,IAAA,YAAA,EAAA,YADA;AAEA,IAAA,WAAA,EAAA,WAFA;AAGA,IAAA,aAAA,EAAA;AAHA,GAHA;AAQA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,QAAA,EAAA;AAFA,KADA;AAKA,IAAA,gBAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA;AALA,GARA;AAkBA,EAAA,IAlBA,kBAkBA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,EADA;AAEA,MAAA,SAAA,EAAA;AAFA,KAAA;AAIA,GAvBA;AAwBA,EAAA,OAxBA,qBAwBA;AACA,SAAA,MAAA,CAAA,MAAA,CAAA,aAAA;AACA,SAAA,SAAA,GAAA,KAAA,MAAA,CAAA,OAAA,CAAA,WAAA;AACA,GA3BA;AA4BA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,OADA,mBACA,QADA,EACA,QADA,EACA;AACA,aAAA,QAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA;AACA,OAHA;AAIA,MAAA,SAAA,EAAA;AAJA;AADA,GA5BA;AAoCA,EAAA,OAAA,EAAA;AACA,IAAA,oBADA,gCACA,MADA,EACA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,MAAA;AACA,WAAA,KAAA,CAAA,OAAA,EAAA,MAAA;AACA,KAJA;AAKA,IAAA,WALA,uBAKA,KALA,EAKA,KALA,EAKA;AACA,UAAA,GAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,KAAA,QAAA,CAAA;AACA,MAAA,GAAA,CAAA,KAAA,CAAA,GAAA,KAAA;AACA,WAAA,KAAA,CAAA,OAAA,EAAA,GAAA;AACA,KATA;AAUA,IAAA,YAVA,wBAUA,KAVA,EAUA;AACA,UAAA,GAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,KAAA,QAAA,CAAA;AACA,MAAA,GAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA;AACA,WAAA,KAAA,CAAA,OAAA,EAAA,GAAA;AACA,KAdA;AAeA,IAAA,SAfA,uBAeA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,YAAA;AACA,UAAA,GAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,KAAA,QAAA,CAAA;AACA,MAAA,GAAA,CAAA,IAAA,CAAA;AACA,QAAA,EAAA,EAAA,CAAA,CADA;AAEA,QAAA,IAAA,EAAA,eAFA;AAGA,QAAA,QAAA,EAAA,CAAA,CAHA;AAIA,QAAA,MAAA,EAAA;AAJA,OAAA;AAMA,WAAA,KAAA,CAAA,OAAA,EAAA,GAAA;AACA,KAzBA,CA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAjFA;AApCA,CAAA","sourcesContent":["<template lang=\"pug\">\ndiv.blocks-component(v-if=\"!!value\")\n    vue-draggable.blocks(\n        :value=\"value\"\n        v-bind=\"optionsDraggable || {}\"\n        :id=\"createdID\"\n        @input=\"inputDraggableHandle\"\n    )\n        script-block.draggable-section__element(\n            v-for=\"(val, index) in curValue\"\n            :key=\"index\"\n            :value=\"val\"\n            @input=\"inputHandle(index, $event)\"\n            :indexComponent=\"index\"\n            @onRemove=\"removeHandle(index)\"\n        )\n    div.blocks-component__options\n        div.button-script.inline-block.cursor-pointer(@click=\"addHandle\")\n            paragraph-icon.button-script__icon.inline-block\n            p.regular.font-body.button-script__text.inline-block {{ $t('$buttons.add_script') }}\n</template>\n\n<script>\n\nimport VueDraggable from 'vuedraggable';\nimport ScriptBlock from '@/components/elements/fields/block/ScriptBlock.vue';\n\n// import DropdownContent from '@/components/Dropdown/DropdownContent.vue'\n\n// import ParagraphContent from '@/components/Fields/Additional/ParagraphContent.vue'\n// import ImageContent from '@/components/Fields/Additional/ImageContent.vue'\n\n\nimport ParagraphIcon from 'icons/Paragraph.svg'\n// import ImageIcon from 'icon/Image.svg'\n\nexport default {\n    name: 'BlocksComponent',\n    componentName: 'BlocksComponent',\n    components: {\n        VueDraggable,\n        ScriptBlock,\n        ParagraphIcon\n    },\n    props: {\n        value: {\n            type: Array,\n            required: null\n        },\n        optionsDraggable: {\n            type: Object,\n            default: null\n        }\n    },\n    data() {\n        return {\n            curValue: [],\n            createdID: '',\n        };\n    },\n    created() {\n        this.$store.commit('incObjectID');\n        this.createdID = this.$store.getters.getObjectID;\n    },\n    watch: {\n        value: {\n            handler(newValue, oldValue) {\n                this.curValue = this.$panel.clone(newValue);\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        inputDraggableHandle(values) {\n            console.log(values);\n            this.$emit('input', values);\n        },\n        inputHandle(index, value) {\n            let tmp = this.$panel.clone(this.curValue);\n            tmp[index] = value;\n            this.$emit('input', tmp);\n        },\n        removeHandle(index) {\n            let tmp = this.$panel.clone(this.curValue);\n            tmp.splice(index, 1);\n            this.$emit('input', tmp);\n        },\n        addHandle() {\n            console.log(\"ADD HANDLE\")\n            let tmp = this.$panel.clone(this.curValue);\n            tmp.push({\n                id: -1,\n                text: '#!/bin/bash\\n',\n                position: -1,\n                status: 'NEW'\n            });\n            this.$emit('input', tmp);\n        }\n    //     onRemove(index){\n    //         if (!!this.options.disabled && this.options.disabled){\n    //             return;\n    //         }\n    //         this.value.splice(index, 1);\n    //     },\n    //     addParagraph: function(){\n    //         if (!!this.options.disabled && this.options.disabled){\n    //             return;\n    //         }\n    //         this.value.push({\n    //             type: 'TEXT', //enum('paragraph', 'image'),\n    //             content: {\n    //                 // Paragraph blocks\n    //                 text: {\n    //                     en: '',\n    //                     ru: ''\n    //                 },// Image block\n    //             }\n    //         });\n            \n    //     },\n    //     addImage: function(){\n    //         if (!!this.options.disabled && this.options.disabled){\n    //             return;\n    //         }\n    //         this.value.push({\n    //             type: 'IMAGE', //enum('paragraph', 'image'),\n    //             content: {\n    //                 image: null,\n    //                 caption: {\n    //                     en: '',\n    //                     ru: ''\n    //                 }\n    //             }\n    //         });\n    //     },\n    //     editBlock(index, v){\n    //         if (!!this.options.disabled && this.options.disabled){\n    //             return;\n    //         }\n    //         let new_value = this.value;\n    //         new_value[index].content = v;\n    //         //console.log(new_value);\n    //         this.$emit('input', new_value);\n    //     },\n    //     edit(v){\n    //         if (!!this.options.disabled && this.options.disabled){\n    //             return;\n    //         }\n    //         //console.log('edit', v);\n    //         //this.value.splice(0, this.value.length).push.apply(this.value, v);\n    //         //console.log(this.value);\n    //         this.$emit('input', v);\n    //         this.changeKey = !this.changeKey;\n    //     },\n    },\n}\n</script>\n\n<style lang=\"scss\">\n.blocks-component {\n    position: relative;\n    width: 100%;\n    border: 1px solid $cyan-10;\n    box-sizing: border-box;\n    &__options {\n        width: 100%;\n        color: darken($cyan-30, 5);\n        position: relative;\n        border-top: 5px solid $cyan-10;\n        background-color: $white;\n        & .button-script {\n            margin-left: 20px;\n            margin-top: 20px;\n            margin-bottom: 20px;\n            padding: 10px 15px 0px 10px;\n            height: 30px;\n            &:hover {\n                background-color: lighten($cyan-10, 17);\n                opacity: 0.8;\n            }\n            &:active {\n                opacity: 1;\n            }\n            &__icon {\n                margin: 11px 7px 0 0px;\n                margin-top: -5px;\n                & .paragraph-icon-- {\n                    stroke: darken($cyan-30, 5);\n                }\n            }\n        }\n    }\n}\n</style>"],"sourceRoot":"src/components/elements/fields"}]}