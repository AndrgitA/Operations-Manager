{"remainingRequest":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/thread-loader/dist/cjs.js!/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/babel-loader/lib/index.js!/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/src/components/modals/EditProcessModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/src/components/modals/EditProcessModal.vue","mtime":1570790569477},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1570790663275},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1570790665071},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/babel-loader/lib/index.js","mtime":1570790663215},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1570790663275},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/index.js","mtime":1570790665183},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1570790663275},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1570790665071},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/babel-loader/lib/index.js","mtime":1570790663215},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1570790663275},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/index.js","mtime":1570790665183}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport HeaderModal from '@/components/modals/elements/HeaderModal.vue';\nimport DynamicFieldsSection from '@/components/sections/DynamicFieldsSection.vue';\nexport default {\n  name: 'EditProcessModal',\n  componentName: 'EditProcessModal',\n  components: {\n    HeaderModal,\n    DynamicFieldsSection\n  },\n  props: {\n    value: {\n      type: Object,\n      required: true\n    },\n    struct: {\n      type: Object,\n      required: true\n    },\n    callback: {\n      type: Function,\n      default: null\n    },\n    indexModal: {\n      type: Number,\n      required: true\n    },\n    eventValue: {\n      type: Number,\n      default: null\n    }\n  },\n\n  data() {\n    return {\n      curValue: null,\n      curSectionStruct: null\n    };\n  },\n\n  watch: {\n    value: {\n      handler(newValue, oldValue) {\n        this.curValue = this.$panel.clone(newValue);\n      },\n\n      immediate: true\n    },\n    struct: {\n      handler(newValue, oldValue) {\n        if (!!newValue && newValue.hasOwnProperty('sectionStruct')) {\n          this.curSectionStruct = this.$panel.clone(newValue.sectionStruct);\n        }\n      },\n\n      immediate: true\n    }\n  },\n  methods: {\n    checkFillFields() {\n      let flagFill = true;\n      this.curSectionStruct.fields = this.curSectionStruct.fields.map(field => {\n        let type = field.type,\n            fillValid = field.hasOwnProperty('options') && field.options.hasOwnProperty('passFillValid') && field.options.passFillValid,\n            notValidValue = {\n          'input': '',\n          'textarea': '',\n          'inputDate': '',\n          'inputNumber': ''\n        };\n\n        if (!fillValid && notValidValue.hasOwnProperty(field.type)) {\n          if (this.$panel.isEqual(this.curValue[field.name], notValidValue[field.type])) {\n            flagFill = false;\n            field.options['isError'] = true;\n          }\n        }\n\n        return field;\n      });\n      return flagFill;\n    },\n\n    handleCloseHeader(event) {\n      console.log(\"[EditProcessModal.vue]: handleCloseHeader: \", event);\n\n      if (this.callback !== null && this.callback !== undefined) {\n        this.callback({\n          indexModal: this.indexModal,\n          typeEvent: 'close',\n          event\n        });\n      }\n    },\n\n    handleButton(event) {\n      console.log(\"[EditProcessModal.vue]: handleButton: \", event);\n\n      if (!this.checkFillFields()) {\n        // this.$store.commit('addNotification', { text: this.$t('$notifications.fill_all_fields'), color: 'white' })\n        return;\n      }\n\n      ;\n\n      if (this.callback !== null && this.callback !== undefined) {\n        this.callback({\n          indexModal: this.indexModal,\n          typeEvent: this.struct.buttonNameEvent,\n          value: this.curValue,\n          event,\n          eventValue: this.eventValue\n        });\n      }\n    }\n\n  }\n};",{"version":3,"sources":["EditProcessModal.vue"],"names":[],"mappings":"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","sourcesContent":["<template lang=\"pug\">\ndiv.scroll-container.overflow-hidden-auto.edit-process-modal(@click=\"$event.stopPropagation()\")\n    div.width-window.overflow-auto-hidden\n        div.panel-container\n            div.edit-process-modal__inner-containter.back_white(v-if=\"!!struct && !!curValue && !!curSectionStruct\")\n                header-modal(\n                    :title=\"struct.title\"\n                    @onClose=\"handleCloseHeader\"\n                )\n                dynamic-fields-section(\n                    v-model=\"curValue\"\n                    :fields=\"curSectionStruct.fields\"\n                    v-bind=\"curSectionStruct.options\"\n                )\n                div.edit-process-modal__bottom\n                    button.edit-process-modal__bottom-button.btn-cyan.regular.font-body.white(@click=\"handleButton\") {{ struct.button }}\n</template>\n\n<script>\nimport HeaderModal from '@/components/modals/elements/HeaderModal.vue';\nimport DynamicFieldsSection from '@/components/sections/DynamicFieldsSection.vue';\n\nexport default {\n    name: 'EditProcessModal',\n    componentName: 'EditProcessModal',\n    components: {\n        HeaderModal, \n        DynamicFieldsSection\n    },\n    props: {\n        value: {\n            type: Object,\n            required: true\n        },\n        struct: {\n            type: Object,\n            required: true\n        },\n        callback: {\n            type: Function,\n            default: null\n        },\n        indexModal: {\n            type: Number,\n            required: true\n        },\n        eventValue: {\n            type: Number,\n            default: null\n        }\n    },\n    data() {\n        return {\n            curValue: null,\n            curSectionStruct: null\n        }\n    },\n    watch: {\n        value: {\n            handler(newValue, oldValue) {\n                this.curValue = this.$panel.clone(newValue);\n            },\n            immediate: true\n        },\n        struct: {\n            handler(newValue, oldValue) {\n                if (!!newValue && newValue.hasOwnProperty('sectionStruct')) {\n                    this.curSectionStruct = this.$panel.clone(newValue.sectionStruct);\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        checkFillFields() {\n            let flagFill = true;\n            this.curSectionStruct.fields = this.curSectionStruct.fields.map(field => {\n                let type = field.type,\n                    fillValid = field.hasOwnProperty('options') &&\n                                field.options.hasOwnProperty('passFillValid') &&\n                                field.options.passFillValid,\n                    notValidValue = {\n                        'input': '',\n                        'textarea': '',\n                        'inputDate': '',\n                        'inputNumber': ''\n                    };\n                if (!fillValid && notValidValue.hasOwnProperty(field.type)) {\n                    if (this.$panel.isEqual(this.curValue[field.name], notValidValue[field.type])) {\n                        flagFill = false;\n                        field.options['isError'] = true;\n                    }\n                }\n                return field;\n            });\n            return flagFill;\n        },\n        handleCloseHeader(event) {\n            console.log(\"[EditProcessModal.vue]: handleCloseHeader: \", event);\n            if (this.callback !== null && this.callback !== undefined) {\n                this.callback({ indexModal: this.indexModal, typeEvent: 'close', event });\n            }\n        },\n        handleButton(event) {\n            console.log(\"[EditProcessModal.vue]: handleButton: \", event);\n            if (!this.checkFillFields()) {\n                // this.$store.commit('addNotification', { text: this.$t('$notifications.fill_all_fields'), color: 'white' })\n                return;\n            };\n            if (this.callback !== null && this.callback !== undefined) {\n                this.callback({ indexModal: this.indexModal, typeEvent: this.struct.buttonNameEvent, value: this.curValue, event, eventValue: this.eventValue });\n            }\n        }\n    }\n}\n</script>\n\n<style lang=\"scss\">\n.edit-process-modal {\n    overflow-y: auto;\n    height: 100vh;\n    width: 100%;\n    &__inner-containter {\n        margin-left: auto;\n        margin-right: auto;\n        margin-top: 100px;\n        width: 610px;\n        margin-bottom: 20px;\n    }\n\n    &__bottom {\n        width: 100%;\n        height: 40px;\n        position: relative;\n        padding-bottom: 20px;\n        padding-top: 40px;\n        &-button {\n            padding: 10px 20px;\n            min-width: 150px;\n            // margin: 20px;\n            position: absolute;\n            right: 20px;\n            height: 42px;\n        }\n    }\n    &__checkbox {\n        margin: 10px 19px 20px 19px;\n        width: auto;\n        // width: calc(100% - 38px);\n        &-label {\n\n        }\n    }\n}\n</style>"],"sourceRoot":"src/components/modals"}]}