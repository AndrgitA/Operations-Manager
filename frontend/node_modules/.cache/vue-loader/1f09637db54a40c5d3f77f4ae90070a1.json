{"remainingRequest":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/src/components/modals/EditProcessModal.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/src/components/modals/EditProcessModal.vue","mtime":1570790569477},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/css-loader/index.js","mtime":1570790663459},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1570790665183},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/postcss-loader/src/index.js","mtime":1570790664303},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/sass-loader/dist/cjs.js","mtime":1570790664835},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/sass-loader/dist/cjs.js","mtime":1570790664835},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/style-resources-loader/lib/index.js","mtime":1570790664955},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1570790663275},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/index.js","mtime":1570790665183}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.edit-process-modal {\n    overflow-y: auto;\n    height: 100vh;\n    width: 100%;\n    &__inner-containter {\n        margin-left: auto;\n        margin-right: auto;\n        margin-top: 100px;\n        width: 610px;\n        margin-bottom: 20px;\n    }\n\n    &__bottom {\n        width: 100%;\n        height: 40px;\n        position: relative;\n        padding-bottom: 20px;\n        padding-top: 40px;\n        &-button {\n            padding: 10px 20px;\n            min-width: 150px;\n            // margin: 20px;\n            position: absolute;\n            right: 20px;\n            height: 42px;\n        }\n    }\n    &__checkbox {\n        margin: 10px 19px 20px 19px;\n        width: auto;\n        // width: calc(100% - 38px);\n        &-label {\n\n        }\n    }\n}\n",{"version":3,"sources":["EditProcessModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"EditProcessModal.vue","sourceRoot":"src/components/modals","sourcesContent":["<template lang=\"pug\">\ndiv.scroll-container.overflow-hidden-auto.edit-process-modal(@click=\"$event.stopPropagation()\")\n    div.width-window.overflow-auto-hidden\n        div.panel-container\n            div.edit-process-modal__inner-containter.back_white(v-if=\"!!struct && !!curValue && !!curSectionStruct\")\n                header-modal(\n                    :title=\"struct.title\"\n                    @onClose=\"handleCloseHeader\"\n                )\n                dynamic-fields-section(\n                    v-model=\"curValue\"\n                    :fields=\"curSectionStruct.fields\"\n                    v-bind=\"curSectionStruct.options\"\n                )\n                div.edit-process-modal__bottom\n                    button.edit-process-modal__bottom-button.btn-cyan.regular.font-body.white(@click=\"handleButton\") {{ struct.button }}\n</template>\n\n<script>\nimport HeaderModal from '@/components/modals/elements/HeaderModal.vue';\nimport DynamicFieldsSection from '@/components/sections/DynamicFieldsSection.vue';\n\nexport default {\n    name: 'EditProcessModal',\n    componentName: 'EditProcessModal',\n    components: {\n        HeaderModal, \n        DynamicFieldsSection\n    },\n    props: {\n        value: {\n            type: Object,\n            required: true\n        },\n        struct: {\n            type: Object,\n            required: true\n        },\n        callback: {\n            type: Function,\n            default: null\n        },\n        indexModal: {\n            type: Number,\n            required: true\n        },\n        eventValue: {\n            type: Number,\n            default: null\n        }\n    },\n    data() {\n        return {\n            curValue: null,\n            curSectionStruct: null\n        }\n    },\n    watch: {\n        value: {\n            handler(newValue, oldValue) {\n                this.curValue = this.$panel.clone(newValue);\n            },\n            immediate: true\n        },\n        struct: {\n            handler(newValue, oldValue) {\n                if (!!newValue && newValue.hasOwnProperty('sectionStruct')) {\n                    this.curSectionStruct = this.$panel.clone(newValue.sectionStruct);\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        checkFillFields() {\n            let flagFill = true;\n            this.curSectionStruct.fields = this.curSectionStruct.fields.map(field => {\n                let type = field.type,\n                    fillValid = field.hasOwnProperty('options') &&\n                                field.options.hasOwnProperty('passFillValid') &&\n                                field.options.passFillValid,\n                    notValidValue = {\n                        'input': '',\n                        'textarea': '',\n                        'inputDate': '',\n                        'inputNumber': ''\n                    };\n                if (!fillValid && notValidValue.hasOwnProperty(field.type)) {\n                    if (this.$panel.isEqual(this.curValue[field.name], notValidValue[field.type])) {\n                        flagFill = false;\n                        field.options['isError'] = true;\n                    }\n                }\n                return field;\n            });\n            return flagFill;\n        },\n        handleCloseHeader(event) {\n            console.log(\"[EditProcessModal.vue]: handleCloseHeader: \", event);\n            if (this.callback !== null && this.callback !== undefined) {\n                this.callback({ indexModal: this.indexModal, typeEvent: 'close', event });\n            }\n        },\n        handleButton(event) {\n            console.log(\"[EditProcessModal.vue]: handleButton: \", event);\n            if (!this.checkFillFields()) {\n                // this.$store.commit('addNotification', { text: this.$t('$notifications.fill_all_fields'), color: 'white' })\n                return;\n            };\n            if (this.callback !== null && this.callback !== undefined) {\n                this.callback({ indexModal: this.indexModal, typeEvent: this.struct.buttonNameEvent, value: this.curValue, event, eventValue: this.eventValue });\n            }\n        }\n    }\n}\n</script>\n\n<style lang=\"scss\">\n.edit-process-modal {\n    overflow-y: auto;\n    height: 100vh;\n    width: 100%;\n    &__inner-containter {\n        margin-left: auto;\n        margin-right: auto;\n        margin-top: 100px;\n        width: 610px;\n        margin-bottom: 20px;\n    }\n\n    &__bottom {\n        width: 100%;\n        height: 40px;\n        position: relative;\n        padding-bottom: 20px;\n        padding-top: 40px;\n        &-button {\n            padding: 10px 20px;\n            min-width: 150px;\n            // margin: 20px;\n            position: absolute;\n            right: 20px;\n            height: 42px;\n        }\n    }\n    &__checkbox {\n        margin: 10px 19px 20px 19px;\n        width: auto;\n        // width: calc(100% - 38px);\n        &-label {\n\n        }\n    }\n}\n</style>"]}]}