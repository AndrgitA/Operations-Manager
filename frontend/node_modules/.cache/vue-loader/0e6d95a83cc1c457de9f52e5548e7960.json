{"remainingRequest":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/src/views/Information.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/src/views/Information.vue","mtime":1570804310750},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1570790663275},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/babel-loader/lib/index.js","mtime":1570790663215},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1570790663275},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/index.js","mtime":1570790665183}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// import TitlePage from '@/components/titles/TitlePage.vue';\n// import BlocksComponent from '@/components/elements/fields/BlocksComponent.vue';\n\nimport InformationPanel from '@/components/controlPanels/InformationPanel.vue';\nimport InfoViewSection from '@/components/sections/InfoViewSection.vue';\n\nexport default {\n    name: 'PageInformation',\n    componentName: 'PageInformation',\n    components: {\n    //     TitlePage,\n    //     BlocksComponent,\n        InfoViewSection,\n        InformationPanel\n    },\n    data() {\n        return {\n            isShowData: false,\n            material: {\n                packageInfo: null,\n                systemInfo: null\n            }\n        };\n    },\n    computed: {\n        getBios() {\n            return `${ this.material.packageInfo.bios.vendor }\\nВерсия: ${ this.material.packageInfo.bios.version }\\n ` +\n                   this.material.packageInfo.bios.date.replace(/(\\d{2})\\/(\\d{2})\\/(\\d{4})/, \"$3-$2-$1\").toDateMyFormat(0, this);\n        },\n        getRam() {\n            return `Всего ОП: ${ Math.round(this.material.systemInfo.Totalram / (1024 ** 3))  } GB\\n` +\n                   `Доступный: ${ Math.round(this.material.systemInfo.Freeram / (1024 ** 2))  } MB\\n` +\n                   `Всего подкачки: ${ Math.round(this.material.systemInfo.Totalswap / (1024 ** 2))  } MB\\n` +\n                   `Доступно подскачки: ${ Math.round(this.material.systemInfo.Freeswap / (1024 ** 2))  } MB\\n`;\n        },\n        getNode() {\n            return `Хост: ${ this.material.packageInfo.node.hostname }\\n` +\n                   `${ this.material.packageInfo.node.machineid }\\n` +\n                   `Часовой пояс: ${ this.material.packageInfo.node.timezone }\\n`;\n        },\n        getBoard() {\n            return [\n                [\n                    { name: 'assettag', text: this.material.packageInfo.board.assettag },\n                    { name: 'name', text: this.material.packageInfo.board.name },\n                    { name: 'vendor', text: this.material.packageInfo.board.vendor },\n                    { name: 'version', text: this.material.packageInfo.board.version }\n                ],\n                [\n                    { name: 'assettag', text: this.material.packageInfo.chassis.assettag },\n                    { name: 'type', text: this.material.packageInfo.chassis.type },\n                    { name: 'vendor', text: this.material.packageInfo.chassis.vendor },\n                    { name: 'version', text: this.material.packageInfo.chassis.version }\n                ]\n            ];\n        },\n        getStorage() {\n            return this.material.packageInfo.storage.map(storage => {\n                return Object.keys(storage).map(key => {\n                    if (key === 'size') {\n                        return { name: key, text: storage[key] + \" GB\" }\n                    } else {\n                        return { name: key, text: storage[key] }\n                    }\n                })\n            });\n        },\n        getCPUKernel() {\n            return [\n                [\n                    { name: 'model', text: this.material.packageInfo.cpu.model },\n                    { name: 'cpus / cores / threads', text: `${ this.material.packageInfo.cpu.cpus } / ${ this.material.packageInfo.cpu.cores } / ${ this.material.packageInfo.cpu.threads }` },\n                    { name: 'vendor', text: this.material.packageInfo.cpu.vendor },\n                ],\n                [\n                    { name: 'architecture', text: this.material.packageInfo.kernel.architecture },\n                    { name: 'release', text: this.material.packageInfo.kernel.release },\n                    { name: 'version', text: this.material.packageInfo.kernel.version },\n                ]\n            ];\n        }\n    },\n    created() {\n        this.fetchData();\n    },\n    methods: {\n        fetchData() {\n            this.$store.state.axios.get('/information').then(response => {\n                console.log(\"[Information.vue]: fetchData(response): \", response);\n                if (response.status === 200){\n                    this.material = response.data;\n                    this.isShowData = true;\n                }\n            }).catch(error => {\n                console.log(\"[Information.vue]: fetchData(error): \", error);\n            });\n        },\n        handleExport() {\n            if (!!this.material) {\n                let text = JSON.stringify(this.material);\n                let data = new Blob([text], { type : 'application/json' });\n                let target = doucment.createElement(\"a\");\n                let url = window.URL.createObjectURL(data);\n                target.setAttribute(\"href\", url)\n                target.setAttribute(\"download\", \"operations-manager__info-system.json\");\n                target.click();\n                setTimeout(() => {\n                    window.URL.revokeObjectURL(url);\n                }, 100);\n            }\n        }\n    }\n\n}\n",{"version":3,"sources":["Information.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"Information.vue","sourceRoot":"src/views","sourcesContent":["<template lang=\"pug\">\ndiv#page-information.scroll-containter.overflow-hidden-auto.back_cyan-1(v-if=\"isShowData\")\n    div.width-window.information__content\n        div.panel-container\n            div.information__content-left.inline-block\n                info-view-section.information__section(\n                    :title=\"`${ $t('$sections.board') } / ${ $t('$sections.chassis') }`\"\n                    :data=\"getBoard\"\n                )\n                info-view-section.information__section(\n                    :title=\"`${ $t('$sections.cpu') } / ${ $t('$sections.kernel') } `\"\n                    :data=\"getCPUKernel\"\n                )\n                info-view-section.information__section(\n                    :title=\"`${ $t('$sections.storage') }`\"\n                    :data=\"getStorage\"\n                )\n\n            div.information__content-right.information__panel-control.inline-block\n                information-panel(\n                    :title=\"$t('$controls.information')\"\n                    :name_os=\"material.packageInfo.os.name\"\n                    :architecture=\"material.packageInfo.os.architecture\"\n                    :bios=\"getBios\"\n                    :memoryRam=\"getRam\"\n                    :node=\"getNode\"\n                )\n                span.information__button-text.btn-text(\n                    @click=\"handleExport\"\n                ) {{ $t('$buttons.export') }}\n</template>\n\n<script>\n// import TitlePage from '@/components/titles/TitlePage.vue';\n// import BlocksComponent from '@/components/elements/fields/BlocksComponent.vue';\n\nimport InformationPanel from '@/components/controlPanels/InformationPanel.vue';\nimport InfoViewSection from '@/components/sections/InfoViewSection.vue';\n\nexport default {\n    name: 'PageInformation',\n    componentName: 'PageInformation',\n    components: {\n    //     TitlePage,\n    //     BlocksComponent,\n        InfoViewSection,\n        InformationPanel\n    },\n    data() {\n        return {\n            isShowData: false,\n            material: {\n                packageInfo: null,\n                systemInfo: null\n            }\n        };\n    },\n    computed: {\n        getBios() {\n            return `${ this.material.packageInfo.bios.vendor }\\nВерсия: ${ this.material.packageInfo.bios.version }\\n ` +\n                   this.material.packageInfo.bios.date.replace(/(\\d{2})\\/(\\d{2})\\/(\\d{4})/, \"$3-$2-$1\").toDateMyFormat(0, this);\n        },\n        getRam() {\n            return `Всего ОП: ${ Math.round(this.material.systemInfo.Totalram / (1024 ** 3))  } GB\\n` +\n                   `Доступный: ${ Math.round(this.material.systemInfo.Freeram / (1024 ** 2))  } MB\\n` +\n                   `Всего подкачки: ${ Math.round(this.material.systemInfo.Totalswap / (1024 ** 2))  } MB\\n` +\n                   `Доступно подскачки: ${ Math.round(this.material.systemInfo.Freeswap / (1024 ** 2))  } MB\\n`;\n        },\n        getNode() {\n            return `Хост: ${ this.material.packageInfo.node.hostname }\\n` +\n                   `${ this.material.packageInfo.node.machineid }\\n` +\n                   `Часовой пояс: ${ this.material.packageInfo.node.timezone }\\n`;\n        },\n        getBoard() {\n            return [\n                [\n                    { name: 'assettag', text: this.material.packageInfo.board.assettag },\n                    { name: 'name', text: this.material.packageInfo.board.name },\n                    { name: 'vendor', text: this.material.packageInfo.board.vendor },\n                    { name: 'version', text: this.material.packageInfo.board.version }\n                ],\n                [\n                    { name: 'assettag', text: this.material.packageInfo.chassis.assettag },\n                    { name: 'type', text: this.material.packageInfo.chassis.type },\n                    { name: 'vendor', text: this.material.packageInfo.chassis.vendor },\n                    { name: 'version', text: this.material.packageInfo.chassis.version }\n                ]\n            ];\n        },\n        getStorage() {\n            return this.material.packageInfo.storage.map(storage => {\n                return Object.keys(storage).map(key => {\n                    if (key === 'size') {\n                        return { name: key, text: storage[key] + \" GB\" }\n                    } else {\n                        return { name: key, text: storage[key] }\n                    }\n                })\n            });\n        },\n        getCPUKernel() {\n            return [\n                [\n                    { name: 'model', text: this.material.packageInfo.cpu.model },\n                    { name: 'cpus / cores / threads', text: `${ this.material.packageInfo.cpu.cpus } / ${ this.material.packageInfo.cpu.cores } / ${ this.material.packageInfo.cpu.threads }` },\n                    { name: 'vendor', text: this.material.packageInfo.cpu.vendor },\n                ],\n                [\n                    { name: 'architecture', text: this.material.packageInfo.kernel.architecture },\n                    { name: 'release', text: this.material.packageInfo.kernel.release },\n                    { name: 'version', text: this.material.packageInfo.kernel.version },\n                ]\n            ];\n        }\n    },\n    created() {\n        this.fetchData();\n    },\n    methods: {\n        fetchData() {\n            this.$store.state.axios.get('/information').then(response => {\n                console.log(\"[Information.vue]: fetchData(response): \", response);\n                if (response.status === 200){\n                    this.material = response.data;\n                    this.isShowData = true;\n                }\n            }).catch(error => {\n                console.log(\"[Information.vue]: fetchData(error): \", error);\n            });\n        },\n        handleExport() {\n            if (!!this.material) {\n                let text = JSON.stringify(this.material);\n                let data = new Blob([text], { type : 'application/json' });\n                let target = doucment.createElement(\"a\");\n                let url = window.URL.createObjectURL(data);\n                target.setAttribute(\"href\", url)\n                target.setAttribute(\"download\", \"operations-manager__info-system.json\");\n                target.click();\n                setTimeout(() => {\n                    window.URL.revokeObjectURL(url);\n                }, 100);\n            }\n        }\n    }\n\n}\n</script>\n\n<style lang=\"scss\">\n#page-information {\n    width: 100%;\n    height: calc(100vh - 60px);\n    box-sizing: border-box;\n    padding-bottom: 100px;\n    .information {\n        &__content {\n            width: 100%;\n            &-left {\n                width: 820px;\n            }\n            &-right {\n                width: 400px;\n                margin-left: 20px;\n                margin-top: 20px;\n            }\n        }\n        &__section {\n            margin-top: 20px;\n            width: 100%;\n            background-color: $white;\n        }\n        &__button-text {\n            margin-top: 30px;\n            margin-left: 21px;\n        }\n    }\n}\n</style>"]}]}