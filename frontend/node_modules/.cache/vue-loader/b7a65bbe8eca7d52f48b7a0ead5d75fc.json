{"remainingRequest":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/src/views/Scripts.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/src/views/Scripts.vue","mtime":1570639487826},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/style-resources-loader/lib/index.js","mtime":499162500000},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#page-scripts {\n    position: relative;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: calc(100vh - 60px);\n    box-sizing: border-box;\n    padding-bottom: 60px;\n    & .top-line {\n        &__slot {\n\n        }\n        &__select {\n            width: 250px;\n        }\n        &__button {\n            min-width: 150px;\n            padding: 10px 20px;\n            box-sizing: border-box;\n        }\n    }\n    & .material {\n        &__title-names {\n            border-bottom: 1px solid $grey10;\n            position: -webkit-sticky; /* Required for Safari */\n            position: sticky;\n            top: -20px;\n            z-index: 100;\n            margin-bottom: -1px;\n            &-border-no {\n                border-bottom: none;\n                margin-bottom: 0px;\n            }\n        }\n    }\n}\n",{"version":3,"sources":["Scripts.vue"],"names":[],"mappingsfile":"Scripts.vue","sourceRoot":"src/views","sourcesContent":["<template lang=\"pug\">\ndiv#page-scripts.scroll-container.overflow-hidden-auto.back_white(\n    @scroll=\"scrollFunction\"\n)\n    div.width-window\n        top-line-content\n            div.top-line__slot(slot=\"top-line-content__start\")\n            div.top-line__slot(slot=\"top-line-content__end\")\n                div.top-line__button.btn-cyan.text-center(@click=\"handleClickTopButton\") {{ $t('$buttons.new') }}\n\n    div.width-window.material-list\n        div.panel-container\n            material-process(\n                v-for=\"(material, index) in materials\"\n                :data=\"material\"\n                :key=\"index\"\n                @onSignal=\"handleSignalElement(index, $event)\"\n                @onEdit=\"handleEditElement(index)\"\n            )\n</template>\n\n<script>\nimport TopLineContent from '@/components/elements/TopLineContent.vue';\nimport SelectComponent from '@/components/elements/fields/SelectComponent.vue';\nimport MaterialTitle from '@/components/elements/MaterialTitle.vue';\nimport MaterialProcess from '@/components/materials/lines/MaterialProcess.vue';\n\nconst MessageBox = () => import(/* webpackChunkName: \"MessageBox\" */ '@/components/modals/MessageBox.vue');\nconst EditScriptsModal = () => import( /* webpackChunkName: \"EditScriptsModal\" */ '@/components/modals/EditScriptsModal.vue')\nexport default {\n    name: 'PageScripts',\n    nameComponent: 'PageScripts',\n    components: {\n        TopLineContent,\n        MaterialTitle,\n        SelectComponent, MaterialProcess\n    },\n    data() {\n        return {\n            materials: [],\n            scrollTop: 0,\n        };\n    },\n    computed: {\n        noBorder() {\n            return this.scrollTop < 100 && this.materials.length !== 0;\n        }\n    },\n    created() {\n        console.log(\"[Processes.vue]: created \", this.$route);\n        this.fetchData();\n    },\n    methods: {\n        getStructModal() {\n            let struct = {\n                title: '',\n                button: '',\n                buttonNameEvent: '',\n                sectionStruct: {\n                    options: null,\n                    fields: [\n                        {\n                            name: 'cmd',\n                            type: 'input',\n                            options: {\n                                label: this.$t('$fields.cmd'),\n                                maxLength: 80\n                            }\n                        },\n                        {\n                            name: 'attributes',\n                            type: 'input',\n                            options: {\n                                label: this.$t('$fields.attributes'),\n                                passFillValid: true,\n                            }\n                        }\n                    ]\n                }\n            };\n            return struct;\n        },\n        handleInputTitle(index) {\n            // let curIndex = index === 1 ? 0 : index;         // disabled district index 1\n \n            if (this.currentSort === index) {\n                this.currentSortDirection = !this.currentSortDirection;\n            } else {\n                this.currentSort = index;\n                this.currentSortDirection = true;\n            }\n\n            localStorage.setItem('sort_omanager_direction', this.currentSortDirection);\n            localStorage.setItem('sort_omanager', index);\n            this.clearData();\n            this.fetchData();\n        },\n        handleClickTopButton(event) {\n            console.log(\"[Processes.vue]: handleClickTopButton: \", event);\n            this.showModal('create');\n        },\n        showModal(key, obj = null) {\n            let struct = this.getStructModal();\n            let value = null;\n            if (key === 'create') {\n                struct.title = this.$t('$fields.new_public_process');\n                struct.button = this.$t('$buttons.start');\n                struct.buttonNameEvent = 'create';\n\n                value = {\n                    cmd: '',\n                    attributes: ''\n                };\n            }\n\n            this.$store.commit('addModal', {\n                value: value,\n                options: {\n                    struct: struct,\n                    callback: this.callbackModal,\n                    eventValue: obj === null ? null : obj.index\n                },\n                component: EditScriptsModal\n            });\n        },\n        callbackModal(event) {\n            console.log(\"[Processes.vue]: callbackModal: \", event);\n            if (!!event) {\n                if (event.typeEvent === 'close') {\n                    this.$store.commit('removeModal', event.indexModal);\n                } else if (event.typeEvent === 'create') {\n                    console.log(\"CREATE PROCESS\");\n                    this.postPromocode(event.value, event.indexModal);\n                }\n            }\n        },\n        clearData() {\n            this.materials = [];\n        },\n        handleTopSelect(key, event) {\n            this.topLine[key] = event;\n            localStorage.setItem(`omanager-panel__${ key }-scripts`, event);\n\n            this.clearData();\n            this.fetchData();\n        },\n        getLocalStorageValue(key, defaultValue) {\n            let localVar = localStorage.getItem(key);\n            if (localVar) {\n                return localVar;\n            } else {\n                localStorage.setItem(key, defaultValue);\n            }\n            return defaultValue;\n        },\n        scrollFunction(event) {\n            this.scrollTop = event.target.scrollTop;\n        },\n        getQueryLine(args) {\n            let length = Object.keys(args).length;\n            if (length < 1) {\n                return '';\n            } else {\n                let str = Object.keys(args)\n                                .map(key => `${ key }=${ args[key] }`)\n                                .join('&');\n                return '?' + str;\n            }\n        },\n        handleSignalElement(indexRemove, signal) {\n            console.log(\"[Promovodes.vue]: handleRemoveElement: \", indexRemove);\n            this.$store.commit('addModal', {\n                value: this.$t('$modals.message_box.question_leave'),\n                options: {\n                    text: this.$t('$modals.message_box.cannot_undone'),\n                    callback: this.callbackMessageBox,\n                    buttonCancel: this.$t('$buttons.cancel'),\n                    buttonOk: this.$t('$buttons.ok'),\n                    type: 'delete',\n                    eventValue: { index: indexRemove, data: { signal } }\n                },\n                component: MessageBox\n            });\n        },\n        callbackMessageBox(event) {\n            console.log(\"[Processes.vue]: callbackMessageBox: \", event);\n            this.$store.commit('removeModal', event.indexModal);\n            if (event.value) {\n                this.PostIdData(event.eventValue.index, event.eventValue.data);\n            }\n        },\n        PostIdData(indexElement, postData) {\n            console.log(\"[Processes.vue]: PostIdData: \", postData);\n            this.$store.state.axios.post(`/scripts/${ this.curMaterials[indexElement].pid }`, postData).then(response => {\n                console.log(\"[FeedId.vue]: PostIdData(response): \", response);\n                if (response.status === 200) {\n                    // this.materials.splice(indexDelete, 1);\n                    // this.isRouteNext = true;\n                    // this.$router.replace({ path: '/feed' });\n                    this.fetchData();\n                }\n            }).catch(error => {\n                console.log(\"[FeedId.vue]: PostIdData(error): \", error);\n            })\n        },\n        deleteData(indexDelete) {\n            console.log(\"[Processes.vue]: deleteData: \", indexDelete);\n            this.$store.state.axios.delete(`/scripts/${ this.curMaterials[indexDelete].pid }`).then(response => {\n                console.log(\"[FeedId.vue]: deleteFeed(response): \", response);\n                if (response.status === 200) {\n                    // this.materials.splice(indexDelete, 1);\n                    // this.isRouteNext = true;\n                    // this.$router.replace({ path: '/feed' });\n                    this.fetchData();\n                }\n            }).catch(error => {\n                console.log(\"[FeedId.vue]: deleteFeed(error): \", error);\n            })\n            // this.materials.splice(indexDelete, 1);\n        },\n        handleEditElement(indexEdit) {\n            console.log(\"[Promovodes.vue]: handleEditElement: \", indexEdit);\n            this.showModal('edit', { index: indexEdit, material: this.materials[indexEdit] });\n            \n        },\n        getFilterByUser(source) {\n            console.log(this.topLine.user);\n            if (this.topLine.user === 'ALL_USERS') {\n                return source;\n            }\n            return source.filter(process => process.user === this.topLine.user);\n        },\n        globalSort() {\n            let materials = this.$panel.clone(this.materials);\n            materials = this.getFilterByUser(materials)\n            materials = this.sortByField(materials, this.currentSort);\n            this.curMaterials = materials;\n        },\n        sortByField(v, current){\n            let array = this.$panel.clone(v)\n            function sortByCurrent(a, b){\n                let tmp1 = a,\n                    tmp2 = b;\n                switch(current) {\n                    case 0:\n                        tmp1 = a.user.toLowerCase();\n                        tmp2 = b.user.toLowerCase(); \n                        break;\n                    case 1:\n                        tmp1 = a.c;\n                        tmp2 = b.c; \n                        break;\n                    case 2: \n                        tmp1 = a.mem;\n                        tmp2 = b.mem;\n                        break;\n                    case 3:\n                        tmp1 = a.pid;\n                        tmp2 = b.pid;\n                        break;\n                    case 4: \n                        tmp1 = a.pgid;\n                        tmp2 = b.pgid;\n                        break;\n                    case 5: \n                        tmp1 = a.ppid;\n                        tmp2 = b.ppid;\n                        break;\n                    case 6: \n                        tmp1 = a.psr;\n                        tmp2 = b.psr;\n                        break;\n                    case 7: \n                        tmp1 = a.rss;\n                        tmp2 = b.rss;\n                        break;\n                    case 8: \n                        tmp1 = a.sid;\n                        tmp2 = b.sid;\n                        break;\n                    case 9: \n                        tmp1 = a.start;\n                        tmp2 = b.start;\n                        break;\n                    case 10: \n                        tmp1 = a.stat;\n                        tmp2 = b.stat;\n                        break;\n                    case 11: \n                        tmp1 = a.sz;\n                        tmp2 = b.sz;\n                        break;\n                    case 12: \n                        tmp1 = a.time;\n                        tmp2 = b.time;\n                        break;\n                    case 13: \n                        tmp1 = a.tpgid;\n                        tmp2 = b.tpgid;\n                        break;\n                    case 14: \n                        tmp1 = a.tty;\n                        tmp2 = b.tty;\n                        break;\n                    case 15: \n                        tmp1 = a.uid;\n                        tmp2 = b.uid;\n                        break;\n                    case 16: \n                        tmp1 = a.vsz;\n                        tmp2 = b.vsz;\n                        break;\n                    case 17: \n                        tmp1 = a.cmd.toLowerCase();\n                        tmp2 = b.cmd.toLowerCase();\n                        break;\n                    default:\n                        tmp1 = a.toString().toLowerCase();\n                        tmp2 = b.toString().toLowerCase();\n                }\n                if (tmp1 < tmp2) return -1;\n                if (tmp1 > tmp2) return 1;\n                return 0;\n            }\n            array.sort(sortByCurrent);\n            if (!this.currentSortDirection) {\n                array = array.reverse();\n            }\n            // console.log(Object.prototype.toString.call(array), array);\n            //console.log(this.current_sort);\n            return array;\n        },\n        updateSelect(array) {\n            let users = [];\n            array.forEach(process => {\n                if (users.indexOf(process.user) === -1) {\n                    users.push(process.user);\n                }\n            });\n            let usersOptions = [\n                { value: 'ALL_USERS', label: this.$t('$common.all_users'), fixed_index: 0 },\n            ];\n            users.forEach(username => {\n                usersOptions.push({ value: username, label: username })\n            });\n            this.topLine.options.user = usersOptions;\n        },\n        postPromocode(postData, index = null) {\n            this.$store.state.axios.post('/scripts', postData).then(response => {\n                console.log(\"[Processes.vue]: postPromocode(response): \", response);\n                if (response.status === 200) {\n                    if (this.index !== null) {\n                        this.$store.commit('removeModal', index);\n                        this.$store.commit('addNotification', { \n                            text: `${ this.$t('$notifications.process_started') }`, \n                            color: 'green' \n                        });\n                    }\n                    this.fetchData();\n                }\n            }).catch(error => {\n                console.log(\"[Processes.vue]: postPromocode(error): \", error);\n                this.$store.commit('addNotification', { \n                    text: `${ this.$t('$notifications.process_started_failed') }`, \n                    color: 'red' \n                });\n            })\n        },\n        putPromocode(putData, index = null, indexMaterial = null) {\n            let id = putData.id;\n            delete putData.id;\n            if (id !== null) {\n                this.$store.state.axios.post(`/processs/${ id }`, putData).then(response => {\n                    console.log(\"[Processes.vue]: postPromocode(response): \", response);\n                    if (response.status === 200) {\n                        if (this.index !== null) {\n                            this.$store.commit('removeModal', index);\n                        }\n                        if (indexMaterial !== null && indexMaterial >= 0 && indexMaterial < this.materials.length) {\n                            // this.materials[indexMaterial] = response.data;\n                            let materials = this.$panel.clone(this.materials);\n                            materials[indexMaterial] = response.data;\n                            this.materials = materials;\n                        }\n                        // this.fetchData();\n                    }\n                }).catch(error => {\n                    console.log(\"[Processes.vue]: postPromocode(error): \", error);\n                })\n            }\n        },\n        fetchData() {\n            this.$store.state.axios.get('/scripts').then(response => {\n                console.log(\"[Processes.vue]: fetchData(response): \", response);\n                if (response.status === 200) {\n                    // this.materials = response.data;\n                    // this.updateSelect(this.materials);\n                    // this.globalSort();\n                    // this.isUpdate = true;\n                }\n            }).catch(error => {\n                console.log(\"[Processes.vue]: fetchData(error): \", error);\n            });\n            \n        },\n    }\n}\n</script>\n\n<style lang=\"scss\">\n#page-scripts {\n    position: relative;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: calc(100vh - 60px);\n    box-sizing: border-box;\n    padding-bottom: 60px;\n    & .top-line {\n        &__slot {\n\n        }\n        &__select {\n            width: 250px;\n        }\n        &__button {\n            min-width: 150px;\n            padding: 10px 20px;\n            box-sizing: border-box;\n        }\n    }\n    & .material {\n        &__title-names {\n            border-bottom: 1px solid $grey10;\n            position: -webkit-sticky; /* Required for Safari */\n            position: sticky;\n            top: -20px;\n            z-index: 100;\n            margin-bottom: -1px;\n            &-border-no {\n                border-bottom: none;\n                margin-bottom: 0px;\n            }\n        }\n    }\n}\n</style>"]}]}