{"remainingRequest":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/src/components/elements/fields/TextareaComponent.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/src/components/elements/fields/TextareaComponent.vue","mtime":1570790569477},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1570790663275},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1570790665071},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/babel-loader/lib/index.js","mtime":1570790663215},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1570790663275},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/index.js","mtime":1570790665183}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Maxlength from '@/utils/mixins/maxLength.js';\n\nexport default {\n    name: 'TextareaComponent',\n    componentName: 'TextareaComponent',\n    mixins: [ Maxlength ],\n    props: {\n        value: String,\n        placeholder: String,\n        label: String,\n        text: String,\n        style_component: {\n            type: Object,\n            default: null\n        },\n        isError: {\n            type: Boolean,\n            defaul: false\n        },\n        disabled: {\n            type: Boolean,\n            defaul: false\n        },\n        crop: {\n            type: Boolean,\n            default: true\n        },\n        autosize: {\n            type: Boolean,\n            default: true\n        },\n        rows: {\n            type: Number,\n            default: 1\n        }\n    },\n    data() {\n        return {\n            curValue: '',\n            focused: false,\n            idObject: '',\n        }\n    },\n    watch: {\n        value: {\n            handler(newValue, oldValue) {\n                this.curValue = newValue;\n                this.updateCounter(newValue);\n            },\n            immediate: true\n        }\n    },\n    created(){\n        console.log(\"CREATED TEXTAREA\");\n        this.$store.commit('incObjectID');\n        this.idObject = this.$store.getters.getObjectID;\n    },\n    methods:{\n        handleFocus(event){\n            this.focused = true;\n        },\n        handleBlur(event){\n            this.focused = false;\n        },\n        handleTextarea(value) {\n            if (this.value !== value) {\n                this.$emit('input', value);\n            }\n        },\n    }\n}\n",{"version":3,"sources":["TextareaComponent.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TextareaComponent.vue","sourceRoot":"src/components/elements/fields","sourcesContent":["<template lang=\"pug\">\ndiv.textarea-component(\n    :class=`[\n        (!!style_component && !!style_component.class) ? style_component.class : '',\n        { \n            'is-disabled': disabled,\n            'is-focused': focused\n        }\n    ]`\n)\n    span.regular.font-body.textarea-component__label(\n        v-if=\"!!label\"\n        :class=\"{ 'error': (isError && value === '') }\"\n    ) {{ label }}\n    div.textarea-component__inner.back_grey2.flex\n        div.textarea-component__prepend.inline-block\n            slot(name=\"prepend-textarea\")\n        textarea-autosize.textarea-component__textarea.inline-block.black.back_grey2(\n            v-model=\"curValue\",\n            @input=\"handleTextarea\"\n            :maxLength=\"crop ? maxLength : ''\"\n            :placeholder=\"placeholder\"\n            :disabled=\"disabled\"\n            @focus.native=\"handleFocus\"\n            @blur.native=\"handleBlur\"\n            :id=\"idObject\"\n            :autosize=\"autosize\"\n            :rows=\"rows\"\n            ref=\"textarea\"\n        )\n        div.inline-block.textarea-component__right-block\n            p.textarea-component__counter.regular.font-tech.inline-block(\n                v-if=\"hasMaxlength\"\n                :class=\"limitClasses\"\n            ) {{ counter }}\n            p.textarea-component__text.regular.font-tech.inline-block.grey50(v-if=\"!!text\") {{ text }}\n        div.textarea-component__append.inline-block\n            slot(name=\"append-textarea\")\n</template>\n\n<script>\nimport Maxlength from '@/utils/mixins/maxLength.js';\n\nexport default {\n    name: 'TextareaComponent',\n    componentName: 'TextareaComponent',\n    mixins: [ Maxlength ],\n    props: {\n        value: String,\n        placeholder: String,\n        label: String,\n        text: String,\n        style_component: {\n            type: Object,\n            default: null\n        },\n        isError: {\n            type: Boolean,\n            defaul: false\n        },\n        disabled: {\n            type: Boolean,\n            defaul: false\n        },\n        crop: {\n            type: Boolean,\n            default: true\n        },\n        autosize: {\n            type: Boolean,\n            default: true\n        },\n        rows: {\n            type: Number,\n            default: 1\n        }\n    },\n    data() {\n        return {\n            curValue: '',\n            focused: false,\n            idObject: '',\n        }\n    },\n    watch: {\n        value: {\n            handler(newValue, oldValue) {\n                this.curValue = newValue;\n                this.updateCounter(newValue);\n            },\n            immediate: true\n        }\n    },\n    created(){\n        console.log(\"CREATED TEXTAREA\");\n        this.$store.commit('incObjectID');\n        this.idObject = this.$store.getters.getObjectID;\n    },\n    methods:{\n        handleFocus(event){\n            this.focused = true;\n        },\n        handleBlur(event){\n            this.focused = false;\n        },\n        handleTextarea(value) {\n            if (this.value !== value) {\n                this.$emit('input', value);\n            }\n        },\n    }\n}\n</script>\n\n<style lang=\"scss\">\n.textarea-component {\n    width: 100%;\n    position: relative;\n    padding: 0;\n    &__label {\n        width: 100%;\n        padding: 10px 0;\n    }\n    &__inner {\n        width: calc(100% - 30px);\n        // height: 38px;\n        border: 1px solid $grey10;\n        padding: 10px 14px;\n        &:hover {\n            border: 1px solid $grey33;\n        }\n    }\n    &__textarea {\n        flex: 1;\n        width: 100%;\n        height: 100%;\n        box-sizing: border-box;\n        border: none;\n        outline: none;\n    }\n    &__counter , &__text {\n        margin-left: 10px;\n        margin-top: 4px;\n        width: auto;\n    }\n    &__right-block {\n        display: inline-flex;\n        flex-direction: column-reverse;\n    }\n    &__text {\n        order: 1;\n        height: 100%;\n    }\n    &__counter {\n        padding-bottom: 2px;\n    }\n    &.is-focused {\n        .textarea-component {\n            &__inner {\n                background-color: $white;\n                border: 1px solid $grey33;\n            }\n            &__textarea {\n                background-color: $white;\n            }\n        }\n    }\n    &.is-disabled {\n        color: $grey50;\n        .textarea-component {\n            &__inner {\n                border: 1px solid $grey10;\n                &:hover {\n                    border: 1px solid $grey10;\n                }\n            }\n            &__textarea {\n                cursor: not-allowed;\n                color: $grey50;\n            }\n        }\n    }\n}\n</style>"]}]}