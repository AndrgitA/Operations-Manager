{"remainingRequest":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/src/components/elements/fields/BlocksComponent.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/src/components/elements/fields/BlocksComponent.vue","mtime":1570790569477},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/css-loader/index.js","mtime":1570790663459},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1570790665183},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/postcss-loader/src/index.js","mtime":1570790664303},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/sass-loader/dist/cjs.js","mtime":1570790664835},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/sass-loader/dist/cjs.js","mtime":1570790664835},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/style-resources-loader/lib/index.js","mtime":1570790664955},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1570790663275},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/index.js","mtime":1570790665183}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.blocks-component {\n    position: relative;\n    width: 100%;\n    border: 1px solid $cyan-10;\n    box-sizing: border-box;\n    &__options {\n        width: 100%;\n        color: darken($cyan-30, 5);\n        position: relative;\n        border-top: 5px solid $cyan-10;\n        background-color: $white;\n        & .button-script {\n            margin-left: 20px;\n            margin-top: 20px;\n            margin-bottom: 20px;\n            padding: 10px 15px 0px 10px;\n            height: 30px;\n            &:hover {\n                background-color: lighten($cyan-10, 17);\n                opacity: 0.8;\n            }\n            &:active {\n                opacity: 1;\n            }\n            &__icon {\n                margin: 11px 7px 0 0px;\n                margin-top: -5px;\n                & .paragraph-icon-- {\n                    stroke: darken($cyan-30, 5);\n                }\n            }\n        }\n    }\n}\n",{"version":3,"sources":["BlocksComponent.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BlocksComponent.vue","sourceRoot":"src/components/elements/fields","sourcesContent":["<template lang=\"pug\">\ndiv.blocks-component(v-if=\"!!value\")\n    vue-draggable.blocks(\n        :value=\"value\"\n        v-bind=\"optionsDraggable || {}\"\n        :id=\"createdID\"\n        @input=\"inputDraggableHandle\"\n    )\n        script-block.draggable-section__element(\n            v-for=\"(val, index) in curValue\"\n            :key=\"index\"\n            :value=\"val\"\n            @input=\"inputHandle(index, $event)\"\n            :indexComponent=\"index\"\n            @onRemove=\"removeHandle(index)\"\n        )\n    div.blocks-component__options\n        div.button-script.inline-block.cursor-pointer(@click=\"addHandle\")\n            paragraph-icon.button-script__icon.inline-block\n            p.regular.font-body.button-script__text.inline-block {{ $t('$buttons.add_script') }}\n</template>\n\n<script>\n\nimport VueDraggable from 'vuedraggable';\nimport ScriptBlock from '@/components/elements/fields/block/ScriptBlock.vue';\n\n// import DropdownContent from '@/components/Dropdown/DropdownContent.vue'\n\n// import ParagraphContent from '@/components/Fields/Additional/ParagraphContent.vue'\n// import ImageContent from '@/components/Fields/Additional/ImageContent.vue'\n\n\nimport ParagraphIcon from 'icons/Paragraph.svg'\n// import ImageIcon from 'icon/Image.svg'\n\nexport default {\n    name: 'BlocksComponent',\n    componentName: 'BlocksComponent',\n    components: {\n        VueDraggable,\n        ScriptBlock,\n        ParagraphIcon\n    },\n    props: {\n        value: {\n            type: Array,\n            required: null\n        },\n        optionsDraggable: {\n            type: Object,\n            default: null\n        }\n    },\n    data() {\n        return {\n            curValue: [],\n            createdID: '',\n        };\n    },\n    created() {\n        this.$store.commit('incObjectID');\n        this.createdID = this.$store.getters.getObjectID;\n    },\n    watch: {\n        value: {\n            handler(newValue, oldValue) {\n                this.curValue = this.$panel.clone(newValue);\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        inputDraggableHandle(values) {\n            console.log(values);\n            this.$emit('input', values);\n        },\n        inputHandle(index, value) {\n            let tmp = this.$panel.clone(this.curValue);\n            tmp[index] = value;\n            this.$emit('input', tmp);\n        },\n        removeHandle(index) {\n            let tmp = this.$panel.clone(this.curValue);\n            tmp.splice(index, 1);\n            this.$emit('input', tmp);\n        },\n        addHandle() {\n            console.log(\"ADD HANDLE\")\n            let tmp = this.$panel.clone(this.curValue);\n            tmp.push({\n                id: -1,\n                text: '#!/bin/bash\\n',\n                position: -1,\n                status: 'NEW'\n            });\n            this.$emit('input', tmp);\n        }\n    //     onRemove(index){\n    //         if (!!this.options.disabled && this.options.disabled){\n    //             return;\n    //         }\n    //         this.value.splice(index, 1);\n    //     },\n    //     addParagraph: function(){\n    //         if (!!this.options.disabled && this.options.disabled){\n    //             return;\n    //         }\n    //         this.value.push({\n    //             type: 'TEXT', //enum('paragraph', 'image'),\n    //             content: {\n    //                 // Paragraph blocks\n    //                 text: {\n    //                     en: '',\n    //                     ru: ''\n    //                 },// Image block\n    //             }\n    //         });\n            \n    //     },\n    //     addImage: function(){\n    //         if (!!this.options.disabled && this.options.disabled){\n    //             return;\n    //         }\n    //         this.value.push({\n    //             type: 'IMAGE', //enum('paragraph', 'image'),\n    //             content: {\n    //                 image: null,\n    //                 caption: {\n    //                     en: '',\n    //                     ru: ''\n    //                 }\n    //             }\n    //         });\n    //     },\n    //     editBlock(index, v){\n    //         if (!!this.options.disabled && this.options.disabled){\n    //             return;\n    //         }\n    //         let new_value = this.value;\n    //         new_value[index].content = v;\n    //         //console.log(new_value);\n    //         this.$emit('input', new_value);\n    //     },\n    //     edit(v){\n    //         if (!!this.options.disabled && this.options.disabled){\n    //             return;\n    //         }\n    //         //console.log('edit', v);\n    //         //this.value.splice(0, this.value.length).push.apply(this.value, v);\n    //         //console.log(this.value);\n    //         this.$emit('input', v);\n    //         this.changeKey = !this.changeKey;\n    //     },\n    },\n}\n</script>\n\n<style lang=\"scss\">\n.blocks-component {\n    position: relative;\n    width: 100%;\n    border: 1px solid $cyan-10;\n    box-sizing: border-box;\n    &__options {\n        width: 100%;\n        color: darken($cyan-30, 5);\n        position: relative;\n        border-top: 5px solid $cyan-10;\n        background-color: $white;\n        & .button-script {\n            margin-left: 20px;\n            margin-top: 20px;\n            margin-bottom: 20px;\n            padding: 10px 15px 0px 10px;\n            height: 30px;\n            &:hover {\n                background-color: lighten($cyan-10, 17);\n                opacity: 0.8;\n            }\n            &:active {\n                opacity: 1;\n            }\n            &__icon {\n                margin: 11px 7px 0 0px;\n                margin-top: -5px;\n                & .paragraph-icon-- {\n                    stroke: darken($cyan-30, 5);\n                }\n            }\n        }\n    }\n}\n</style>"]}]}