{"remainingRequest":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/src/components/elements/fields/InputNumber.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/src/components/elements/fields/InputNumber.vue","mtime":1569232184656},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrey/Документы/Andrgit/Study/Golang/Operations-Manager/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    name: 'InputNumber',\n    componentName: 'InputNumber',\n    props: {\n        value: {\n            type: [String, Number],\n            default: null\n        },\n        placeholder: String,\n        label: String,\n        text: String,\n        style_component: {\n            type: Object,\n            default: null\n        },\n        isError: {\n            type: Boolean,\n            defaul: false\n        },\n        disabled: {\n            type: Boolean,\n            defaul: false\n        },\n        nullable: {\n            type: Boolean,\n            default: false\n        },\n        max: {\n            type: Number,\n            default: Infinity\n        },\n        min: {\n            type: Number,\n            default: -Infinity\n        },\n        integer: {\n            type: Boolean,\n            default: false\n        }\n    },\n    data() {\n        return {\n            curValue: '',\n            focused: false,\n            idObject: '',\n        }\n    },\n    watch: {\n        value: {\n            handler(newValue, oldValue) {\n                if (Object.prototype.toString.call(newValue) === '[object Number]') {\n                    this.curValue = isNaN(newValue) ? (this.nullable ? '' : '0') : newValue.toString();\n                } else {\n                    this.curValue = newValue.length === 0 ? (this.nullable ? '' : '0') : newValue;\n                }\n               \n            },\n            immediate: true\n        }\n    },\n    computed: {\n    },\n    methods: {\n        keyPress(event) {\n            console.log(\"[InputNumber.vue]: keyPress: \", event.target.value);\n            let evt = (event) ? event : window.event;\n            let charCode = (evt.which) ? evt.which : evt.keyCode;\n\n            if (charCode < 48 || charCode > 57) {\n                evt.preventDefault();\n            }\n            console.log(charCode);\n        },\n        handleInput(event) {\n            console.log(\"[InputNumber.vue]: handleInput: \", event);\n            let targetValue = event.target.value,\n                parseValue = Number.parseInt(event.target.value);\n\n            if (targetValue !== '' && !isNaN(parseValue)) {\n                if (this.min > parseValue) {\n                    this.$emit('input', this.min);\n                    event.target.value = this.min.toString();\n                } else if (this.max < parseValue) {\n                    this.$emit('input', this.max);\n                    event.target.value = this.max.toString();\n                } else {\n                    this.$emit('input', parseValue);\n                }\n            } else {\n                if (this.nullable) {\n                    this.$emit('input', null);\n                    event.target.value = '';\n                } else {\n                    this.$emit('input', 0);\n                    event.target.value = '0';\n                }\n            }\n        },\n        keyDown(key, event) {\n            console.log(\"[InputNumber.vue]: keyDown: \", key, event, event.target.value === '');\n            let parseValue = Number.parseInt(event.target.value);\n            if (key === 38) {   // up\n                event.preventDefault();\n                this.$emit('input', event.target.value === '' || isNaN(parseValue) ? 1 : (parseValue + 1 > this.max) ? this.max : ++parseValue);\n            } else if (key === 40) {            // down\n                event.preventDefault();\n                this.$emit('input', (event.target.value === '' || isNaN(parseValue) || parseValue < 1) ? 0 : --parseValue);\n            }\n        },\n        handleFocus(event) {\n            this.focused = true;\n        },\n        handleBlur(event) {\n            this.focused = false;\n            let targetValue = event.target.value,\n                parseValue = Number.parseInt(event.target.value);\n            if (targetValue !== '' && !isNaN(parseValue)) {\n                if (this.min > parseValue) {\n                    this.$emit('input', this.min);\n                    event.target.value = this.min.toString();\n                } else if (this.max < parseValue) {\n                    this.$emit('input', this.max);\n                    event.target.value = this.max.toString();\n                } else {\n                    this.$emit('input', parseValue);\n                }\n            } else {\n                if (this.nullable) {\n                    this.$emit('input', null);\n                    event.target.value = '';\n                } else {\n                    this.$emit('input', 0);\n                    event.target.value = '0';\n                }\n            }\n        }\n    }\n\n}\n",{"version":3,"sources":["InputNumber.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"InputNumber.vue","sourceRoot":"src/components/elements/fields","sourcesContent":["<template lang=\"pug\">\ndiv.input-number(\n    :class=`[\n        (!!style_component && !!style_component.class) ? style_component.class : '',\n        {\n            'is-disabled': disabled,\n            'is-focused': focused\n        }\n    ]`\n)\n    span.regular-font-body.input-number__label(\n        v-if=\"!!label\"\n        :class=\"{ 'error': (isError && (value === '' || value === null)) }\"\n    ) {{ label }}\n    div.input-number__inner.back_grey2.flex\n        div.input-number__prepend.inline-block\n            slot(name=\"prepend-input\")\n        input.input-number__input.inline-block.black.back_grey2(\n            :value=\"curValue\"\n            @input=\"handleInput\"\n            @change=\"handleInput\"\n            :placeholder=\"placeholder\"\n            :disabled=\"disabled\"\n            type=\"text\"\n            @keypress=\"keyPress\"\n            @keydown.up=\"keyDown(38, $event)\"\n            @keydown.down=\"keyDown(40, $event)\"\n            @focus=\"handleFocus\"\n            @blur=\"handleBlur\"\n            :id=\"idObject\"\n            ref=\"input\"\n        )\n        div.input-number__text.regular.font-tech.inline-block.grey50(v-if=\"!!text\") {{ text }}\n        div.input-number__append.inline-block\n            slot(name=\"append-input\")\n</template>\n\n<script>\nexport default {\n    name: 'InputNumber',\n    componentName: 'InputNumber',\n    props: {\n        value: {\n            type: [String, Number],\n            default: null\n        },\n        placeholder: String,\n        label: String,\n        text: String,\n        style_component: {\n            type: Object,\n            default: null\n        },\n        isError: {\n            type: Boolean,\n            defaul: false\n        },\n        disabled: {\n            type: Boolean,\n            defaul: false\n        },\n        nullable: {\n            type: Boolean,\n            default: false\n        },\n        max: {\n            type: Number,\n            default: Infinity\n        },\n        min: {\n            type: Number,\n            default: -Infinity\n        },\n        integer: {\n            type: Boolean,\n            default: false\n        }\n    },\n    data() {\n        return {\n            curValue: '',\n            focused: false,\n            idObject: '',\n        }\n    },\n    watch: {\n        value: {\n            handler(newValue, oldValue) {\n                if (Object.prototype.toString.call(newValue) === '[object Number]') {\n                    this.curValue = isNaN(newValue) ? (this.nullable ? '' : '0') : newValue.toString();\n                } else {\n                    this.curValue = newValue.length === 0 ? (this.nullable ? '' : '0') : newValue;\n                }\n               \n            },\n            immediate: true\n        }\n    },\n    computed: {\n    },\n    methods: {\n        keyPress(event) {\n            console.log(\"[InputNumber.vue]: keyPress: \", event.target.value);\n            let evt = (event) ? event : window.event;\n            let charCode = (evt.which) ? evt.which : evt.keyCode;\n\n            if (charCode < 48 || charCode > 57) {\n                evt.preventDefault();\n            }\n            console.log(charCode);\n        },\n        handleInput(event) {\n            console.log(\"[InputNumber.vue]: handleInput: \", event);\n            let targetValue = event.target.value,\n                parseValue = Number.parseInt(event.target.value);\n\n            if (targetValue !== '' && !isNaN(parseValue)) {\n                if (this.min > parseValue) {\n                    this.$emit('input', this.min);\n                    event.target.value = this.min.toString();\n                } else if (this.max < parseValue) {\n                    this.$emit('input', this.max);\n                    event.target.value = this.max.toString();\n                } else {\n                    this.$emit('input', parseValue);\n                }\n            } else {\n                if (this.nullable) {\n                    this.$emit('input', null);\n                    event.target.value = '';\n                } else {\n                    this.$emit('input', 0);\n                    event.target.value = '0';\n                }\n            }\n        },\n        keyDown(key, event) {\n            console.log(\"[InputNumber.vue]: keyDown: \", key, event, event.target.value === '');\n            let parseValue = Number.parseInt(event.target.value);\n            if (key === 38) {   // up\n                event.preventDefault();\n                this.$emit('input', event.target.value === '' || isNaN(parseValue) ? 1 : (parseValue + 1 > this.max) ? this.max : ++parseValue);\n            } else if (key === 40) {            // down\n                event.preventDefault();\n                this.$emit('input', (event.target.value === '' || isNaN(parseValue) || parseValue < 1) ? 0 : --parseValue);\n            }\n        },\n        handleFocus(event) {\n            this.focused = true;\n        },\n        handleBlur(event) {\n            this.focused = false;\n            let targetValue = event.target.value,\n                parseValue = Number.parseInt(event.target.value);\n            if (targetValue !== '' && !isNaN(parseValue)) {\n                if (this.min > parseValue) {\n                    this.$emit('input', this.min);\n                    event.target.value = this.min.toString();\n                } else if (this.max < parseValue) {\n                    this.$emit('input', this.max);\n                    event.target.value = this.max.toString();\n                } else {\n                    this.$emit('input', parseValue);\n                }\n            } else {\n                if (this.nullable) {\n                    this.$emit('input', null);\n                    event.target.value = '';\n                } else {\n                    this.$emit('input', 0);\n                    event.target.value = '0';\n                }\n            }\n        }\n    }\n\n}\n</script>\n\n<style lang=\"scss\">\n.input-number {\n    width: 100%;\n    position: relative;\n    padding: 0;\n    &__label {\n        width: 100%;\n        padding: 10px 0;\n    }\n    &__inner {\n        width: calc(100% - 30px);\n        height: 38px;\n        border: 1px solid $grey10;\n        padding: 0 14px;\n        &:hover {\n            border: 1px solid $grey33;\n        }\n    }\n    &__input {\n        flex: 1;\n        width: 100%;\n        height: 100%;\n        box-sizing: border-box;\n        border: none;\n        outline: none;\n\n\n    }\n    &__text {\n        margin-left: 10px;\n        margin-top: 12px;\n        margin-bottom: 11px;\n    }\n    &.is-focused {\n        .input-number {\n            &__inner {\n                background-color: $white;\n                border: 1px solid $grey33;\n            }\n            &__input {\n                background-color: $white;\n            }\n        }\n    }\n    &.is-disabled {\n        color: $grey50;\n        .input-number {\n            &__inner {\n                border: 1px solid $grey10;\n                &:hover {\n                    border: 1px solid $grey10;\n                }\n            }\n            &__input {\n                cursor: not-allowed;\n                color: $grey50;\n            }\n        }\n    }\n}\n</style>"]}]}